{"file_contents":{"lib/voting.ts":{"content":"import { AlumniProfile, supabase } from './supabase'\nimport { EloCalculator } from './elo-calculator'\n\nexport interface VotingPair {\n  profile1: AlumniProfile\n  profile2: AlumniProfile\n  sessionId: string\n}\n\nexport interface VoteResult {\n  winner?: string\n  equal: boolean\n  sessionId: string\n  eloChanges: {\n    profile1: { oldElo: number; newElo: number; change: number }\n    profile2: { oldElo: number; newElo: number; change: number }\n  }\n}\n\nexport class VotingService {\n  private static recentProfiles: string[] = []\n  private static readonly RECENT_BUFFER_SIZE = 10\n\n  static async getRandomPair(): Promise<VotingPair> {\n    try {\n      // Get all alumni profiles\n      const { data: profiles, error } = await supabase\n        .from('alumni_profiles')\n        .select(`\n          *,\n          experiences (*),\n          education (*)\n        `)\n        .order('elo', { ascending: false })\n\n      if (error) throw error\n      if (!profiles || profiles.length < 2) {\n        throw new Error('Not enough profiles for voting')\n      }\n\n      // Filter out recently shown profiles\n      const availableProfiles = profiles.filter(\n        profile => !this.recentProfiles.includes(profile.id)\n      )\n\n      // If we don't have enough available profiles, reset the recent list\n      const profilesToUse = availableProfiles.length >= 2 ? availableProfiles : profiles\n\n      // Randomly select two profiles\n      const shuffled = [...profilesToUse].sort(() => Math.random() - 0.5)\n      const profile1 = shuffled[0]\n      const profile2 = shuffled[1]\n\n      // Add to recent profiles\n      this.recentProfiles.push(profile1.id, profile2.id)\n      \n      // Keep only the most recent profiles\n      if (this.recentProfiles.length > this.RECENT_BUFFER_SIZE) {\n        this.recentProfiles = this.recentProfiles.slice(-this.RECENT_BUFFER_SIZE)\n      }\n\n      // Generate session ID\n      const sessionId = `vote_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n      return {\n        profile1,\n        profile2,\n        sessionId\n      }\n    } catch (error) {\n      console.error('Error getting random pair:', error)\n      throw error\n    }\n  }\n\n  static async submitVote(\n    profile1Id: string,\n    profile2Id: string,\n    sessionId: string,\n    winnerId?: string\n  ): Promise<VoteResult> {\n    try {\n      const votedEqual = !winnerId\n\n      // Create vote session record\n      const { data: voteSession, error: sessionError } = await supabase\n        .from('vote_sessions')\n        .insert({\n          session_id: sessionId,\n          alumni_1_id: profile1Id,\n          alumni_2_id: profile2Id,\n          winner_id: winnerId,\n          voted_equal: votedEqual\n        })\n        .select()\n        .single()\n\n      if (sessionError) throw sessionError\n\n      let eloChanges = {\n        profile1: { oldElo: 0, newElo: 0, change: 0 },\n        profile2: { oldElo: 0, newElo: 0, change: 0 }\n      }\n\n      // Handle ELO changes if not equal vote\n      if (!votedEqual && winnerId) {\n        // Get current ELO ratings\n        const { data: profiles, error: profilesError } = await supabase\n          .from('alumni_profiles')\n          .select('id, elo')\n          .in('id', [profile1Id, profile2Id])\n\n        if (profilesError) throw profilesError\n\n        const profile1 = profiles.find(p => p.id === profile1Id)\n        const profile2 = profiles.find(p => p.id === profile2Id)\n\n        if (!profile1 || !profile2) throw new Error('Profile not found')\n\n        const winnerElo = winnerId === profile1Id ? profile1.elo : profile2.elo\n        const loserElo = winnerId === profile1Id ? profile2.elo : profile1.elo\n\n        // Calculate new ELO ratings\n        const { winnerNewElo, loserNewElo, winnerChange, loserChange } = \n          EloCalculator.calculateNewElos(winnerElo, loserElo)\n\n        // Update profiles in database\n        const updates = [\n          supabase\n            .from('alumni_profiles')\n            .update({ elo: winnerId === profile1Id ? winnerNewElo : loserNewElo })\n            .eq('id', winnerId),\n          supabase\n            .from('alumni_profiles')\n            .update({ elo: winnerId === profile1Id ? loserNewElo : winnerNewElo })\n            .eq('id', winnerId === profile1Id ? profile2Id : profile1Id)\n        ]\n\n        await Promise.all(updates)\n\n        // Create ELO history records\n        const historyInserts = [\n          supabase\n            .from('elo_history')\n            .insert({\n              alumni_id: winnerId,\n              old_elo: winnerElo,\n              new_elo: winnerNewElo,\n              change_amount: winnerChange,\n              vote_session_id: voteSession.id\n            }),\n          supabase\n            .from('elo_history')\n            .insert({\n              alumni_id: winnerId === profile1Id ? profile2Id : profile1Id,\n              old_elo: loserElo,\n              new_elo: loserNewElo,\n              change_amount: loserChange,\n              vote_session_id: voteSession.id\n            })\n        ]\n\n        await Promise.all(historyInserts)\n\n        // Set elo changes for response\n        eloChanges = {\n          profile1: {\n            oldElo: profile1.elo,\n            newElo: winnerId === profile1Id ? winnerNewElo : loserNewElo,\n            change: winnerId === profile1Id ? winnerChange : loserChange\n          },\n          profile2: {\n            oldElo: profile2.elo,\n            newElo: winnerId === profile1Id ? loserNewElo : winnerNewElo,\n            change: winnerId === profile1Id ? loserChange : winnerChange\n          }\n        }\n      }\n\n      return {\n        winner: winnerId,\n        equal: votedEqual,\n        sessionId,\n        eloChanges\n      }\n    } catch (error) {\n      console.error('Error submitting vote:', error)\n      throw error\n    }\n  }\n}\n\n","size_bytes":5751},"lib/elo-calculator.ts":{"content":"export class EloCalculator {\n  private static readonly K_FACTOR = 15\n  private static readonly BASE_ELO = 2000\n\n  static calculateEloChange(winnerElo: number, loserElo: number): number {\n    const expectedScore = 1 / (1 + Math.pow(10, (loserElo - winnerElo) / 400))\n    return Math.round(this.K_FACTOR * (1 - expectedScore))\n  }\n\n  static calculateNewElos(winnerElo: number, loserElo: number): {\n    winnerNewElo: number\n    loserNewElo: number\n    winnerChange: number\n    loserChange: number\n  } {\n    const winnerChange = this.calculateEloChange(winnerElo, loserElo)\n    const loserChange = -winnerChange\n\n    return {\n      winnerNewElo: winnerElo + winnerChange,\n      loserNewElo: loserElo + loserChange,\n      winnerChange,\n      loserChange\n    }\n  }\n\n  static getBaseElo(): number {\n    return this.BASE_ELO\n  }\n\n  static getKFactor(): number {\n    return this.K_FACTOR\n  }\n}\n\n","size_bytes":886},"README.md":{"content":"# DVHS Alumni Ranking\n\nA gamified website that connects Dougherty Valley High School alumni through competitive voting and ELO-based rankings. Users can vote between randomly paired alumni profiles to determine who's \"more cracked\" and see live leaderboard updates.\n\n## Features\n\n- **Voting System**: Vote between two randomly selected DVHS alumni profiles\n- **ELO Rankings**: Real-time ELO rating system with live updates\n- **Search**: Find specific alumni by name, company, school, or role\n- **Leaderboard**: Live rankings with daily change indicators\n- **Real-time Updates**: Supabase subscriptions for live data synchronization\n- **Admin Panel**: CSV upload, analytics, and profile management\n- **LinkedIn-style UI**: Professional design matching LinkedIn's interface\n\n## Tech Stack\n\n- **Frontend**: Next.js 14, React, TypeScript, Tailwind CSS\n- **Backend**: Supabase (PostgreSQL, Real-time subscriptions)\n- **Data Processing**: Papa Parse for CSV handling\n- **Deployment**: Vercel\n- **Icons**: Lucide React\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18+ \n- npm or yarn\n- Supabase account\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/lkhoshnevis/crackedapp1.0.git\ncd crackedapp1.0\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Set up environment variables:\n```bash\ncp env.example .env.local\n```\n\n4. Configure your Supabase credentials in `.env.local`:\n```\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n5. Set up the database:\n   - Go to your Supabase project dashboard\n   - Navigate to the SQL Editor\n   - Run the SQL commands from `lib/database.sql`\n\n6. Start the development server:\n```bash\nnpm run dev\n```\n\nVisit `http://localhost:3000` to see the application.\n\n## Usage\n\n### For Users\n1. **Vote**: Go to the Vote page to see two random alumni profiles\n2. **Search**: Use the search bar on the home page to find specific alumni\n3. **Leaderboard**: Check the leaderboard to see current ELO rankings\n\n### For Admins\n1. **Upload Data**: Use the admin panel to upload CSV files with alumni data\n2. **Analytics**: View voting statistics and user engagement metrics\n3. **Manage Profiles**: Update or add new alumni profiles\n\n## CSV Format\n\nYour CSV should include these columns:\n- `Profile_Name`: Full name of the alumni\n- `addressWithoutCountry`: Location\n- `Profile_Picture_URL`: LinkedIn profile picture URL\n- `High School`: High school name\n- `DVHS class of`: Graduation year\n- `College_1_Name`, `College_1_Degree`, `College_1_Logo`: Primary college info\n- `Experience_1_Company`, `Experience_1_Role`, `Experience_1_Logo`: Primary work experience\n- `linkedinUrl`: LinkedIn profile URL (optional but recommended)\n- Additional college/experience columns (2, 3, 4) as available\n\n## Deployment\n\n### Vercel (Recommended)\n\n1. Connect your GitHub repository to Vercel\n2. Set environment variables in Vercel dashboard:\n   - `NEXT_PUBLIC_SUPABASE_URL`\n   - `NEXT_PUBLIC_SUPABASE_ANON_KEY`\n3. Deploy automatically on every push to main\n\n### Manual Deployment\n\n```bash\nnpm run build\nnpm start\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature-name`\n3. Commit your changes: `git commit -m 'Add some feature'`\n4. Push to the branch: `git push origin feature-name`\n5. Submit a pull request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Support\n\nFor questions or issues, please open a GitHub issue or contact the development team.","size_bytes":3532},"app/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { AlumniProfile } from '@/lib/supabase'\nimport SearchBar from '@/components/SearchBar'\nimport AlumniProfileCard from '@/components/AlumniProfileCard'\nimport ProfilePicture from '@/components/ProfilePicture'\nimport { Trophy, Users, TrendingUp, ExternalLink, Home } from 'lucide-react'\nimport { supabase } from '@/lib/supabase'\nimport { LiquidButton, LiquidGlassCard } from '@/components/ui/liquid-glass-button'\nimport { CoolLoader } from '@/components/ui/cool-loader'\n\nexport default function HomePage() {\n  const [searchResults, setSearchResults] = useState<AlumniProfile[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n  const [hasSearched, setHasSearched] = useState(false)\n\n  const handleSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults([])\n      setHasSearched(false)\n      return\n    }\n\n    setIsSearching(true)\n    setHasSearched(true)\n\n    try {\n      // Search in multiple fields using Supabase text search\n      const { data, error } = await supabase\n        .from('alumni_profiles')\n        .select(`\n          *,\n          experiences (*),\n          education (*)\n        `)\n        .or(`name.ilike.%${query}%, experience_1_role.ilike.%${query}%, experience_1_company.ilike.%${query}%, college_1_name.ilike.%${query}%, college_1_degree.ilike.%${query}%`)\n        .limit(20)\n\n      if (error) {\n        console.error('Search error:', error)\n        setSearchResults([])\n      } else {\n        setSearchResults(data || [])\n      }\n    } catch (error) {\n      console.error('Search error:', error)\n      setSearchResults([])\n    } finally {\n      setIsSearching(false)\n    }\n  }\n\n  const generateBio = (profile: AlumniProfile): string => {\n    const primaryRole = profile.experience_1_role || profile.experiences?.[0]?.role || 'Professional'\n    const primaryCompany = profile.experience_1_company || profile.experiences?.[0]?.company || 'Company'\n    const primaryDegree = profile.college_1_degree || profile.education?.[0]?.degree || 'Degree'\n    const primarySchool = profile.college_1_name || profile.education?.[0]?.school || 'School'\n    \n    return `${primaryRole} at ${primaryCompany} in ${profile.location}. Studied ${primaryDegree} at ${primarySchool}`\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {/* Home Button */}\n      <div className=\"absolute top-6 left-6\">\n        <LiquidButton asChild size=\"lg\">\n          <a href=\"/\" className=\"inline-flex items-center font-medium rounded-full\">\n            <Home className=\"w-5 h-5 mr-2\" />\n            Home\n          </a>\n        </LiquidButton>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl w-full text-center\">\n          {/* DVHS Logo */}\n          <div className=\"mb-6 flex justify-center\">\n            <img \n              src=\"/dvhs-logo.png\" \n              alt=\"DVHS Logo\" \n              className=\"w-20 h-20 sm:w-24 sm:h-24 opacity-80 hover:opacity-100 transition-opacity duration-300\"\n            />\n          </div>\n          \n          <h1 className=\"text-5xl font-bold text-white mb-2 flex items-center justify-center\">\n            <img \n              src=\"/dv-logo.png\" \n              alt=\"DV\" \n              className=\"h-20 sm:h-24 w-auto -mr-3 sm:-mr-4\"\n            />\n            <span className=\"text-[#5BA3D4] italic\">HS</span>\n            <span className=\"ml-2\">Alumni Network</span>\n          </h1>\n          <p className=\"text-sm text-gray-400 mb-8\">\n            limited to CS Majors\n          </p>\n          \n          {/* Search Bar */}\n          <div className=\"mb-6\">\n            <SearchBar onSearch={handleSearch} />\n          </div>\n          \n          <p className=\"text-xl text-gray-300 mb-10\">\n            Find people the fun way!\n          </p>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row justify-center gap-3 sm:gap-4 max-w-sm sm:max-w-none mx-auto\">\n            <LiquidButton asChild size=\"xl\" variant=\"primary\">\n              <a href=\"/vote\" className=\"inline-flex items-center justify-center text-base sm:text-lg font-semibold\">\n                <Trophy className=\"w-5 h-5 mr-2\" />\n                Start Voting\n              </a>\n            </LiquidButton>\n            <LiquidButton asChild size=\"xl\" variant=\"outline\">\n              <a href=\"/leaderboard\" className=\"inline-flex items-center justify-center text-base sm:text-lg font-semibold\">\n                <TrendingUp className=\"w-5 h-5 mr-2\" />\n                View Leaderboard\n              </a>\n            </LiquidButton>\n          </div>\n        </div>\n      </div>\n\n      {/* Search Results */}\n      {hasSearched && (\n        <div className=\"px-4 sm:px-6 lg:px-8 pb-12 max-w-4xl mx-auto w-full\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-semibold text-white\">\n              Search Results\n            </h2>\n            {isSearching && (\n              <div className=\"flex items-center text-gray-400\">\n                <CoolLoader size=\"sm\" />\n                <span className=\"ml-2\">Searching...</span>\n              </div>\n            )}\n          </div>\n\n          {searchResults.length === 0 && !isSearching ? (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400 text-lg\">No alumni found matching your search.</p>\n              <p className=\"text-gray-500 text-sm mt-2\">Try searching by name, company, school, or role.</p>\n            </div>\n          ) : (\n            <div className=\"grid gap-6\">\n              {searchResults.map((profile) => (\n                <LiquidGlassCard key={profile.id} className=\"p-6 hover:shadow-md transition-shadow duration-200\">\n                  <div className=\"flex items-start space-x-4\">\n                    <ProfilePicture profile={profile} size=\"lg\" />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"text-xl font-semibold text-white\">\n                          {profile.name}\n                        </h3>\n                        {profile.linkedin_url && (\n                          <ExternalLink className=\"w-4 h-4 text-white flex-shrink-0\" />\n                        )}\n                      </div>\n                      <p className=\"text-gray-300 mb-3\">\n                        {generateBio(profile)}\n                      </p>\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"text-sm text-gray-400\">\n                          ELO: <span className=\"font-semibold text-white\">{profile.elo}</span>\n                        </span>\n                        {profile.linkedin_url && (\n                          <a\n                            href={profile.linkedin_url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-white hover:text-gray-300 text-sm font-medium\"\n                          >\n                            View LinkedIn →\n                          </a>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </LiquidGlassCard>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":7548},"app/leaderboard/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { LeaderboardService } from '@/lib/leaderboard'\nimport { LeaderboardEntry } from '@/lib/types'\nimport SearchBar from '@/components/SearchBar'\nimport ProfilePicture from '@/components/ProfilePicture'\nimport { AlumniProfile } from '@/lib/supabase'\nimport { TrendingUp, TrendingDown, Trophy, Medal, Award, ExternalLink, Home } from 'lucide-react'\nimport { LiquidButton, LiquidGlassCard } from '@/components/ui/liquid-glass-button'\nimport { CoolLoader } from '@/components/ui/cool-loader'\n\nexport default function LeaderboardPage() {\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([])\n  const [dailyChanges, setDailyChanges] = useState<Record<string, number>>({})\n  const [loading, setLoading] = useState(true)\n  const [searching, setSearching] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const loadLeaderboard = async () => {\n    setLoading(true)\n    try {\n      const [leaderboardData, changesData] = await Promise.all([\n        LeaderboardService.getLeaderboard(100),\n        LeaderboardService.getDailyChanges()\n      ])\n      \n      setLeaderboard(leaderboardData)\n      setDailyChanges(changesData)\n    } catch (error) {\n      console.error('Error loading leaderboard:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSearch = async (query: string) => {\n    setSearchQuery(query)\n    \n    if (!query.trim()) {\n      loadLeaderboard()\n      return\n    }\n\n    setSearching(true)\n    try {\n      const searchResults = await LeaderboardService.searchLeaderboard(query)\n      setLeaderboard(searchResults)\n    } catch (error) {\n      console.error('Error searching leaderboard:', error)\n    } finally {\n      setSearching(false)\n    }\n  }\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Trophy className=\"w-4 h-4 sm:w-5 sm:h-5 text-yellow-500\" />\n    if (rank === 2) return <Medal className=\"w-4 h-4 sm:w-5 sm:h-5 text-gray-400\" />\n    if (rank === 3) return <Award className=\"w-4 h-4 sm:w-5 sm:h-5 text-amber-600\" />\n    return <span className=\"text-sm sm:text-lg font-bold text-gray-600\">#{rank}</span>\n  }\n\n  const getChangeIcon = (change: number) => {\n    if (change > 0) return <TrendingUp className=\"w-4 h-4 text-green-500\" />\n    if (change < 0) return <TrendingDown className=\"w-4 h-4 text-red-500\" />\n    return null\n  }\n\n  useEffect(() => {\n    loadLeaderboard()\n  }, [])\n\n  if (loading) {\n    return (\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center py-12\">\n          <div className=\"flex justify-center mb-4\">\n            <CoolLoader size=\"lg\" />\n          </div>\n          <p className=\"text-gray-300\">Loading leaderboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      {/* Navigation Buttons */}\n      <div className=\"absolute top-6 left-6 flex space-x-3\">\n        <LiquidButton asChild size=\"lg\">\n          <a href=\"/\" className=\"inline-flex items-center font-medium rounded-full\">\n            <Home className=\"w-5 h-5 mr-2\" />\n            Home\n          </a>\n        </LiquidButton>\n        <LiquidButton asChild size=\"lg\">\n          <a href=\"/vote\" className=\"inline-flex items-center font-medium rounded-full\">\n            <Trophy className=\"w-5 h-5 mr-2\" />\n            Vote\n          </a>\n        </LiquidButton>\n        <LiquidButton asChild size=\"lg\" variant=\"primary\">\n          <a href=\"/leaderboard\" className=\"inline-flex items-center font-medium rounded-full\">\n            <TrendingUp className=\"w-5 h-5 mr-2\" />\n            Leaderboard\n          </a>\n        </LiquidButton>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto pt-16\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\n            DVHS Alumni Leaderboard\n          </h1>\n          <p className=\"text-gray-300\">\n            Live ELO rankings of all DVHS alumni\n          </p>\n        </div>\n\n      {/* Search Bar */}\n      <div className=\"mb-8\">\n        <SearchBar\n          onSearch={handleSearch}\n          placeholder=\"Search for a specific alumni...\"\n        />\n        {searching && (\n          <div className=\"text-center mt-4\">\n            <CoolLoader size=\"sm\" />\n          </div>\n        )}\n      </div>\n\n      {/* Leaderboard */}\n      <LiquidGlassCard>\n        <div className=\"bg-white/5 px-6 py-4 border-b border-gray-700\">\n          <h2 className=\"text-lg font-semibold text-white\">\n            {searchQuery ? `Search Results for \"${searchQuery}\"` : 'Top Rankings'}\n          </h2>\n          <p className=\"text-sm text-gray-400\">\n            {searchQuery ? `${leaderboard.length} results` : `${leaderboard.length} alumni ranked`}\n          </p>\n        </div>\n\n        {leaderboard.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-400 text-lg\">No alumni found.</p>\n            <p className=\"text-gray-500 text-sm mt-2\">\n              {searchQuery ? 'Try a different search term.' : 'Check back later for rankings.'}\n            </p>\n          </div>\n        ) : (\n          <div \n            className=\"divide-y divide-gray-200 max-h-[600px] overflow-y-auto scrollbar-custom\"\n            style={{\n              scrollbarWidth: 'thin',\n              scrollbarColor: '#3B82F6 rgba(255,255,255,0.1)',\n              WebkitOverflowScrolling: 'touch',\n              overscrollBehavior: 'contain'\n            }}\n          >\n            {leaderboard.map((entry) => (\n              <div \n                key={entry.id} \n                className={`px-3 sm:px-6 py-3 sm:py-4 transition-all duration-200 ${\n                  entry.linkedin_url \n                    ? 'hover:bg-linkedin-blue hover:bg-opacity-5 cursor-pointer hover:shadow-sm border-l-4 border-transparent hover:border-linkedin-blue' \n                    : 'hover:bg-gray-50'\n                }`}\n                onClick={() => {\n                  if (entry.linkedin_url) {\n                    window.open(entry.linkedin_url, '_blank')\n                  }\n                }}\n                title={entry.linkedin_url ? \"Click to view LinkedIn profile\" : \"\"}\n              >\n                <div className=\"flex items-center justify-between gap-2\">\n                  <div className=\"flex items-center gap-2 sm:gap-4 flex-1 min-w-0\">\n                    {/* Rank */}\n                    <div className=\"flex items-center justify-center w-8 sm:w-12 flex-shrink-0\">\n                      {getRankIcon(entry.rank)}\n                    </div>\n\n                    {/* Profile Picture */}\n                    <div className=\"flex-shrink-0\">\n                      <ProfilePicture\n                        profile={{\n                          id: entry.id,\n                          name: entry.name,\n                          profile_picture_url: entry.profile_picture_url,\n                          location: '',\n                          experiences: [],\n                          education: [],\n                          created_at: '',\n                          updated_at: '',\n                          elo: entry.elo\n                        }}\n                        size=\"md\"\n                      />\n                    </div>\n\n                    {/* Name and ELO */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-1 sm:gap-2\">\n                        <h3 className=\"text-sm sm:text-lg font-semibold text-white break-words\">\n                          {entry.name}\n                        </h3>\n                        {entry.linkedin_url && (\n                          <ExternalLink className=\"w-3 h-3 sm:w-4 sm:h-4 text-white flex-shrink-0\" />\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-1 sm:gap-2 flex-wrap\">\n                        <span className=\"text-xs sm:text-sm text-white font-semibold\">\n                          ELO: {entry.elo}\n                        </span>\n                        {dailyChanges[entry.id] !== undefined && dailyChanges[entry.id] !== 0 && (\n                          <div className=\"flex items-center gap-0.5 sm:gap-1\">\n                            {getChangeIcon(dailyChanges[entry.id])}\n                            <span className={`text-xs sm:text-sm font-medium ${\n                              dailyChanges[entry.id] > 0 ? 'text-green-600' : 'text-red-600'\n                            }`}>\n                              {dailyChanges[entry.id] > 0 ? '+' : ''}{dailyChanges[entry.id]}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* ELO Score - Hidden on mobile */}\n                  <div className=\"text-right hidden sm:block\">\n                    <div className=\"text-2xl font-bold text-white\">\n                      {entry.elo}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">\n                      ELO Rating\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </LiquidGlassCard>\n\n        {/* Footer Info */}\n        <div className=\"mt-8 text-center text-sm text-gray-400\">\n          <p>\n            Rankings are updated in real-time based on community votes.\n            <br />\n            ELO ratings start at 2000 for new profiles.\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":9664},"lib/types.ts":{"content":"export interface AlumniData {\n  Profile_Name: string\n  addressWithoutCountry: string\n  Profile_Picture_URL: string\n  High_School: string\n  DVHS_class_of: string\n  College_1_Name: string\n  College_1_Degree: string\n  College_1_Logo: string\n  College_2_Name: string\n  College_2_Degree: string\n  College_2_Logo: string\n  College_3_Name: string\n  College_3_Degree: string\n  College_3_Logo: string\n  Experience_1_Company: string\n  Experience_1_Role: string\n  Experience_1_Logo: string\n  Experience_2_Company: string\n  Experience_2_Role: string\n  Experience_2_Logo: string\n  Experience_3_Company: string\n  Experience_3_Role: string\n  Experience_3_Logo: string\n  Experience_4_Company: string\n  Experience_4_Role: string\n  Experience_4_Logo: string\n  linkedinUrl: string\n}\n\nexport interface ParsedAlumniProfile {\n  name: string\n  location: string\n  profile_picture_url?: string\n  high_school?: string\n  dvhs_class_of?: string\n  college_1_name?: string\n  college_1_degree?: string\n  college_1_logo?: string\n  college_2_name?: string\n  college_2_degree?: string\n  college_2_logo?: string\n  college_3_name?: string\n  college_3_degree?: string\n  college_3_logo?: string\n  experience_1_company?: string\n  experience_1_role?: string\n  experience_1_logo?: string\n  experience_2_company?: string\n  experience_2_role?: string\n  experience_2_logo?: string\n  experience_3_company?: string\n  experience_3_role?: string\n  experience_3_logo?: string\n  experience_4_company?: string\n  experience_4_role?: string\n  experience_4_logo?: string\n  linkedin_url?: string\n  experiences: {\n    role: string\n    company: string\n    logo?: string\n  }[]\n  education: {\n    school: string\n    degree: string\n    logo?: string\n  }[]\n}\n\nexport interface VoteResult {\n  winner?: string\n  equal: boolean\n  sessionId: string\n}\n\nexport interface LeaderboardEntry {\n  rank: number\n  id: string\n  name: string\n  elo: number\n  change: number\n  profile_picture_url?: string\n  linkedin_url?: string\n}\n","size_bytes":1954},"hooks/useRealtimeUpdates.ts":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { supabase, AlumniProfile } from '@/lib/supabase'\nimport { RealtimeChannel } from '@supabase/supabase-js'\n\nexport interface RealtimeUpdate {\n  type: 'elo_change' | 'new_vote' | 'profile_update'\n  data: any\n  timestamp: string\n}\n\nexport function useRealtimeUpdates() {\n  const [updates, setUpdates] = useState<RealtimeUpdate[]>([])\n  const [channel, setChannel] = useState<RealtimeChannel | null>(null)\n\n  useEffect(() => {\n    // Create subscription channel\n    const realtimeChannel = supabase\n      .channel('public_updates')\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'alumni_profiles',\n          filter: 'elo'\n        },\n        (payload) => {\n          setUpdates(prev => [...prev.slice(-9), {\n            type: 'elo_change',\n            data: payload,\n            timestamp: new Date().toISOString()\n          }])\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'vote_sessions'\n        },\n        (payload) => {\n          setUpdates(prev => [...prev.slice(-9), {\n            type: 'new_vote',\n            data: payload,\n            timestamp: new Date().toISOString()\n          }])\n        }\n      )\n      .subscribe()\n\n    setChannel(realtimeChannel)\n\n    return () => {\n      realtimeChannel.unsubscribe()\n    }\n  }, [])\n\n  return { updates, channel }\n}\n\nexport function useRealtimeLeaderboard() {\n  const [leaderboard, setLeaderboard] = useState<AlumniProfile[]>([])\n  const [loading, setLoading] = useState(true)\n\n  const loadLeaderboard = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('alumni_profiles')\n        .select(`\n          *,\n          experiences (*),\n          education (*)\n        `)\n        .order('elo', { ascending: false })\n        .limit(100)\n\n      if (error) throw error\n      setLeaderboard(data || [])\n    } catch (error) {\n      console.error('Error loading leaderboard:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    loadLeaderboard()\n\n    // Subscribe to ELO changes\n    const channel = supabase\n      .channel('leaderboard_updates')\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'alumni_profiles',\n          filter: 'elo'\n        },\n        () => {\n          // Reload leaderboard when ELO changes\n          loadLeaderboard()\n        }\n      )\n      .subscribe()\n\n    return () => {\n      channel.unsubscribe()\n    }\n  }, [])\n\n  return { leaderboard, loading, refreshLeaderboard: loadLeaderboard }\n}\n\nexport function useRealtimeStats() {\n  const [stats, setStats] = useState<{\n    totalProfiles: number\n    totalVotes: number\n    averageElo: number\n  } | null>(null)\n\n  const loadStats = async () => {\n    try {\n      const [\n        { count: totalProfiles },\n        { count: totalVotes },\n        { data: profiles }\n      ] = await Promise.all([\n        supabase.from('alumni_profiles').select('*', { count: 'exact', head: true }),\n        supabase.from('vote_sessions').select('*', { count: 'exact', head: true }),\n        supabase.from('alumni_profiles').select('elo')\n      ])\n\n      const averageElo = profiles ? \n        Math.round(profiles.reduce((sum, p) => sum + p.elo, 0) / profiles.length) : 2000\n\n      setStats({\n        totalProfiles: totalProfiles || 0,\n        totalVotes: totalVotes || 0,\n        averageElo\n      })\n    } catch (error) {\n      console.error('Error loading stats:', error)\n    }\n  }\n\n  useEffect(() => {\n    loadStats()\n\n    // Subscribe to changes\n    const channel = supabase\n      .channel('stats_updates')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'alumni_profiles'\n        },\n        () => {\n          loadStats()\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'vote_sessions'\n        },\n        () => {\n          loadStats()\n        }\n      )\n      .subscribe()\n\n    return () => {\n      channel.unsubscribe()\n    }\n  }, [])\n\n  return { stats, refreshStats: loadStats }\n}\n\n","size_bytes":4300},"components/ui/waves-background.tsx":{"content":"\"use client\"\n\nimport { useRef, useEffect } from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface WavesProps {\n  lineColor?: string\n  backgroundColor?: string\n  waveSpeedX?: number\n  waveSpeedY?: number\n  waveAmpX?: number\n  waveAmpY?: number\n  xGap?: number\n  yGap?: number\n  friction?: number\n  tension?: number\n  maxCursorMove?: number\n  className?: string\n}\n\nclass Grad {\n  x: number\n  y: number\n  z: number\n\n  constructor(x: number, y: number, z: number) {\n    this.x = x\n    this.y = y\n    this.z = z\n  }\n  dot2(x: number, y: number) {\n    return this.x * x + this.y * y\n  }\n}\n\nclass Noise {\n  grad3: Grad[]\n  p: number[]\n  perm: number[]\n  gradP: Grad[]\n\n  constructor(seed = 0) {\n    this.grad3 = [\n      new Grad(1, 1, 0),\n      new Grad(-1, 1, 0),\n      new Grad(1, -1, 0),\n      new Grad(-1, -1, 0),\n      new Grad(1, 0, 1),\n      new Grad(-1, 0, 1),\n      new Grad(1, 0, -1),\n      new Grad(-1, 0, -1),\n      new Grad(0, 1, 1),\n      new Grad(0, -1, 1),\n      new Grad(0, 1, -1),\n      new Grad(0, -1, -1),\n    ]\n    this.p = [\n      151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,\n      140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,\n      120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177,\n      33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165,\n      71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n      133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,\n      63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n      135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,\n      226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206,\n      59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248,\n      152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22,\n      39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218,\n      246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241,\n      81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157,\n      184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93,\n      222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,\n    ]\n    this.perm = new Array(512)\n    this.gradP = new Array(512)\n    this.seed(seed)\n  }\n  seed(seed: number) {\n    if (seed > 0 && seed < 1) seed *= 65536\n    seed = Math.floor(seed)\n    if (seed < 256) seed |= seed << 8\n    for (let i = 0; i < 256; i++) {\n      let v = i & 1 ? this.p[i] ^ (seed & 255) : this.p[i] ^ ((seed >> 8) & 255)\n      this.perm[i] = this.perm[i + 256] = v\n      this.gradP[i] = this.gradP[i + 256] = this.grad3[v % 12]\n    }\n  }\n  fade(t: number) {\n    return t * t * t * (t * (t * 6 - 15) + 10)\n  }\n  lerp(a: number, b: number, t: number) {\n    return (1 - t) * a + t * b\n  }\n  perlin2(x: number, y: number) {\n    let X = Math.floor(x),\n      Y = Math.floor(y)\n    x -= X\n    y -= Y\n    X &= 255\n    Y &= 255\n    const n00 = this.gradP[X + this.perm[Y]].dot2(x, y)\n    const n01 = this.gradP[X + this.perm[Y + 1]].dot2(x, y - 1)\n    const n10 = this.gradP[X + 1 + this.perm[Y]].dot2(x - 1, y)\n    const n11 = this.gradP[X + 1 + this.perm[Y + 1]].dot2(x - 1, y - 1)\n    const u = this.fade(x)\n    return this.lerp(\n      this.lerp(n00, n10, u),\n      this.lerp(n01, n11, u),\n      this.fade(y),\n    )\n  }\n}\n\nexport function Waves({\n  lineColor = \"rgba(0, 119, 181, 0.3)\",\n  backgroundColor = \"transparent\",\n  waveSpeedX = 0.0125,\n  waveSpeedY = 0.005,\n  waveAmpX = 32,\n  waveAmpY = 16,\n  xGap = 10,\n  yGap = 32,\n  friction = 0.925,\n  tension = 0.005,\n  maxCursorMove = 100,\n  className,\n}: WavesProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const ctxRef = useRef<CanvasRenderingContext2D | null>(null)\n  const boundingRef = useRef({ width: 0, height: 0, left: 0, top: 0 })\n  const noiseRef = useRef(new Noise(Math.random()))\n  const linesRef = useRef<any[]>([])\n  const mouseRef = useRef({\n    x: -10,\n    y: 0,\n    lx: 0,\n    ly: 0,\n    sx: 0,\n    sy: 0,\n    v: 0,\n    vs: 0,\n    a: 0,\n    set: false,\n  })\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const container = containerRef.current\n    if (!canvas || !container) return\n\n    ctxRef.current = canvas.getContext(\"2d\")\n\n    function setSize() {\n      if (!container) return\n      boundingRef.current = container.getBoundingClientRect()\n      if (canvas) {\n        canvas.width = boundingRef.current.width\n        canvas.height = boundingRef.current.height\n      }\n    }\n\n    function setLines() {\n      const { width, height } = boundingRef.current\n      linesRef.current = []\n      const oWidth = width + 200,\n        oHeight = height + 30\n      const totalLines = Math.ceil(oWidth / xGap)\n      const totalPoints = Math.ceil(oHeight / yGap)\n      const xStart = (width - xGap * totalLines) / 2\n      const yStart = (height - yGap * totalPoints) / 2\n      for (let i = 0; i <= totalLines; i++) {\n        const pts = []\n        for (let j = 0; j <= totalPoints; j++) {\n          pts.push({\n            x: xStart + xGap * i,\n            y: yStart + yGap * j,\n            wave: { x: 0, y: 0 },\n            cursor: { x: 0, y: 0, vx: 0, vy: 0 },\n          })\n        }\n        linesRef.current.push(pts)\n      }\n    }\n\n    function movePoints(time: number) {\n      const lines = linesRef.current\n      const mouse = mouseRef.current\n      const noise = noiseRef.current\n      lines.forEach((pts) => {\n        pts.forEach((p: any) => {\n          const move =\n            noise.perlin2(\n              (p.x + time * waveSpeedX) * 0.002,\n              (p.y + time * waveSpeedY) * 0.0015,\n            ) * 12\n          p.wave.x = Math.cos(move) * waveAmpX\n          p.wave.y = Math.sin(move) * waveAmpY\n\n          const dx = p.x - mouse.sx,\n            dy = p.y - mouse.sy\n          const dist = Math.hypot(dx, dy),\n            l = Math.max(175, mouse.vs)\n          if (dist < l) {\n            const s = 1 - dist / l\n            const f = Math.cos(dist * 0.001) * s\n            p.cursor.vx += Math.cos(mouse.a) * f * l * mouse.vs * 0.00065\n            p.cursor.vy += Math.sin(mouse.a) * f * l * mouse.vs * 0.00065\n          }\n\n          p.cursor.vx += (0 - p.cursor.x) * tension\n          p.cursor.vy += (0 - p.cursor.y) * tension\n          p.cursor.vx *= friction\n          p.cursor.vy *= friction\n          p.cursor.x += p.cursor.vx * 2\n          p.cursor.y += p.cursor.vy * 2\n\n          p.cursor.x = Math.min(\n            maxCursorMove,\n            Math.max(-maxCursorMove, p.cursor.x),\n          )\n          p.cursor.y = Math.min(\n            maxCursorMove,\n            Math.max(-maxCursorMove, p.cursor.y),\n          )\n        })\n      })\n    }\n\n    function moved(point: any, withCursor = true) {\n      const x = point.x + point.wave.x + (withCursor ? point.cursor.x : 0)\n      const y = point.y + point.wave.y + (withCursor ? point.cursor.y : 0)\n      return { x: Math.round(x * 10) / 10, y: Math.round(y * 10) / 10 }\n    }\n\n    function drawLines() {\n      const { width, height } = boundingRef.current\n      const ctx = ctxRef.current\n      if (!ctx) return\n      ctx.clearRect(0, 0, width, height)\n      \n      // Create bright blue gradient\n      const gradient = ctx.createLinearGradient(0, 0, width, 0)\n      gradient.addColorStop(0, 'rgba(59, 130, 246, 0.8)')    // bright blue\n      gradient.addColorStop(0.5, 'rgba(96, 165, 250, 0.7)')  // lighter blue\n      gradient.addColorStop(1, 'rgba(147, 197, 253, 0.6)')   // sky blue\n      \n      ctx.beginPath()\n      ctx.strokeStyle = gradient\n      linesRef.current.forEach((points) => {\n        let p1 = moved(points[0], false)\n        ctx.moveTo(p1.x, p1.y)\n        points.forEach((p: any, idx: number) => {\n          const isLast = idx === points.length - 1\n          p1 = moved(p, !isLast)\n          const p2 = moved(\n            points[idx + 1] || points[points.length - 1],\n            !isLast,\n          )\n          ctx.lineTo(p1.x, p1.y)\n          if (isLast) ctx.moveTo(p2.x, p2.y)\n        })\n      })\n      ctx.stroke()\n    }\n\n    function tick(t: number) {\n      const mouse = mouseRef.current\n\n      mouse.sx += (mouse.x - mouse.sx) * 0.1\n      mouse.sy += (mouse.y - mouse.sy) * 0.1\n\n      const dx = mouse.x - mouse.lx,\n        dy = mouse.y - mouse.ly\n      const d = Math.hypot(dx, dy)\n      mouse.v = d\n      mouse.vs += (d - mouse.vs) * 0.1\n      mouse.vs = Math.min(100, mouse.vs)\n      mouse.lx = mouse.x\n      mouse.ly = mouse.y\n      mouse.a = Math.atan2(dy, dx)\n\n      if (container) {\n        container.style.setProperty(\"--x\", `${mouse.sx}px`)\n        container.style.setProperty(\"--y\", `${mouse.sy}px`)\n      }\n\n      movePoints(t)\n      drawLines()\n      requestAnimationFrame(tick)\n    }\n\n    function onResize() {\n      setSize()\n      setLines()\n    }\n    function onMouseMove(e: MouseEvent) {\n      updateMouse(e.pageX, e.pageY)\n    }\n    function onTouchMove(e: TouchEvent) {\n      e.preventDefault()\n      const touch = e.touches[0]\n      updateMouse(touch.clientX, touch.clientY)\n    }\n    function updateMouse(x: number, y: number) {\n      const mouse = mouseRef.current\n      const b = boundingRef.current\n      mouse.x = x - b.left\n      mouse.y = y - b.top + window.scrollY\n      if (!mouse.set) {\n        mouse.sx = mouse.x\n        mouse.sy = mouse.y\n        mouse.lx = mouse.x\n        mouse.ly = mouse.y\n        mouse.set = true\n      }\n    }\n\n    setSize()\n    setLines()\n    requestAnimationFrame(tick)\n    window.addEventListener(\"resize\", onResize)\n    window.addEventListener(\"mousemove\", onMouseMove)\n    window.addEventListener(\"touchmove\", onTouchMove, { passive: false })\n\n    return () => {\n      window.removeEventListener(\"resize\", onResize)\n      window.removeEventListener(\"mousemove\", onMouseMove)\n      window.removeEventListener(\"touchmove\", onTouchMove)\n    }\n  }, [\n    lineColor,\n    backgroundColor,\n    waveSpeedX,\n    waveSpeedY,\n    waveAmpX,\n    waveAmpY,\n    friction,\n    tension,\n    maxCursorMove,\n    xGap,\n    yGap,\n  ])\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        backgroundColor,\n      }}\n      className={cn(\n        \"absolute top-0 left-0 w-full h-full overflow-hidden\",\n        className,\n      )}\n    >\n      <div\n        className={cn(\n          \"absolute top-0 left-0 rounded-full\",\n          \"w-2 h-2 bg-foreground/10\",\n        )}\n        style={{\n          transform:\n            \"translate3d(calc(var(--x) - 50%), calc(var(--y) - 50%), 0)\",\n          willChange: \"transform\",\n        }}\n      />\n      <canvas ref={canvasRef} className=\"block w-full h-full\" />\n    </div>\n  )\n}\n","size_bytes":10717},"lib/leaderboard.ts":{"content":"import { AlumniProfile, supabase } from './supabase'\nimport { LeaderboardEntry } from './types'\n\nexport class LeaderboardService {\n  static async getLeaderboard(limit: number = 100): Promise<LeaderboardEntry[]> {\n    try {\n      const { data, error } = await supabase\n        .from('alumni_profiles')\n        .select(`\n          id,\n          name,\n          elo,\n          profile_picture_url,\n          linkedin_url,\n          experiences (*),\n          education (*)\n        `)\n        .order('elo', { ascending: false })\n        .limit(limit)\n\n      if (error) {\n        console.error('Error fetching leaderboard:', error)\n        return []\n      }\n\n      const leaderboard = (data || []).map((profile, index) => ({\n        rank: index + 1,\n        id: profile.id,\n        name: profile.name,\n        elo: profile.elo,\n        change: 0, // Will be calculated separately for daily changes\n        profile_picture_url: profile.profile_picture_url,\n        linkedin_url: profile.linkedin_url\n      }))\n\n      return leaderboard\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error)\n      return []\n    }\n  }\n\n  static async searchLeaderboard(query: string): Promise<LeaderboardEntry[]> {\n    try {\n      const { data, error } = await supabase\n        .from('alumni_profiles')\n        .select(`\n          id,\n          name,\n          elo,\n          profile_picture_url,\n          linkedin_url,\n          experiences (*),\n          education (*)\n        `)\n        .ilike('name', `%${query}%`)\n        .order('elo', { ascending: false })\n        .limit(50)\n\n      if (error) {\n        console.error('Error searching leaderboard:', error)\n        return []\n      }\n\n      const leaderboard = (data || []).map((profile, index) => ({\n        rank: index + 1,\n        id: profile.id,\n        name: profile.name,\n        elo: profile.elo,\n        change: 0,\n        profile_picture_url: profile.profile_picture_url,\n        linkedin_url: profile.linkedin_url\n      }))\n\n      return leaderboard\n    } catch (error) {\n      console.error('Error searching leaderboard:', error)\n      return []\n    }\n  }\n\n  static async getProfileRank(profileId: string): Promise<number | null> {\n    try {\n      // Get the profile's ELO\n      const { data: profile, error: profileError } = await supabase\n        .from('alumni_profiles')\n        .select('elo')\n        .eq('id', profileId)\n        .single()\n\n      if (profileError || !profile) return null\n\n      // Count how many profiles have higher ELO\n      const { count, error: countError } = await supabase\n        .from('alumni_profiles')\n        .select('*', { count: 'exact', head: true })\n        .gt('elo', profile.elo)\n\n      if (countError) return null\n\n      return (count || 0) + 1\n    } catch (error) {\n      console.error('Error getting profile rank:', error)\n      return null\n    }\n  }\n\n  static async getDailyChanges(): Promise<Record<string, number>> {\n    try {\n      const yesterday = new Date()\n      yesterday.setDate(yesterday.getDate() - 1)\n      yesterday.setHours(0, 0, 0, 0)\n\n      const { data, error } = await supabase\n        .from('elo_history')\n        .select('alumni_id, change_amount')\n        .gte('created_at', yesterday.toISOString())\n\n      if (error) throw error\n\n      const changes: Record<string, number> = {}\n      ;(data || []).forEach(record => {\n        changes[record.alumni_id] = (changes[record.alumni_id] || 0) + record.change_amount\n      })\n\n      return changes\n    } catch (error) {\n      console.error('Error getting daily changes:', error)\n      return {}\n    }\n  }\n}\n","size_bytes":3584},"setup.sh":{"content":"#!/bin/bash\n\necho \"🚀 Setting up DVHS Alumni Ranking...\"\n\n# Install dependencies\necho \"📦 Installing dependencies...\"\nnpm install\n\n# Create environment file if it doesn't exist\nif [ ! -f .env.local ]; then\n    echo \"📝 Creating .env.local from example...\"\n    cp env.example .env.local\n    echo \"⚠️  Please update .env.local with your Supabase credentials!\"\nelse\n    echo \"✅ .env.local already exists\"\nfi\n\n# Check if Supabase is configured\nif grep -q \"your_supabase_project_url\" .env.local; then\n    echo \"⚠️  Remember to update your Supabase credentials in .env.local\"\nfi\n\necho \"\"\necho \"🎉 Setup complete! Next steps:\"\necho \"1. Set up your Supabase project and run the SQL schema from lib/database.sql\"\necho \"2. Update .env.local with your Supabase URL and anon key\"\necho \"3. Run 'npm run dev' to start the development server\"\necho \"4. Upload your CSV data via the admin panel at /admin\"\necho \"\"\necho \"📚 For detailed instructions, see README.md\"\n\n","size_bytes":969},"app/admin/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { AdminService } from '@/lib/admin'\nimport { Upload, RefreshCw } from 'lucide-react'\n\nexport default function AdminPage() {\n  const [uploading, setUploading] = useState(false)\n  const [uploadMessage, setUploadMessage] = useState('')\n  const [profilesCount, setProfilesCount] = useState(0)\n\n  const handleCSVUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    setUploading(true)\n    setUploadMessage('')\n\n    try {\n      const content = await file.text()\n      console.log('CSV content length:', content.length)\n      console.log('First 500 chars:', content.substring(0, 500))\n      \n      const result = await AdminService.uploadCSV(content)\n      \n      setUploadMessage(result.message)\n      setProfilesCount(prev => prev + result.profilesAdded)\n      \n      console.log('Upload result:', result)\n    } catch (error) {\n      console.error('Upload error:', error)\n      setUploadMessage(`Error uploading file: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Admin Dashboard\n        </h1>\n        <p className=\"text-gray-600\">\n          Upload CSV data to populate the DVHS alumni database\n        </p>\n      </div>\n\n      {/* CSV Upload Section */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Upload CSV Data</h2>\n        \n        <div className=\"space-y-6\">\n          {/* Upload Button */}\n          <div className=\"flex items-center space-x-4\">\n            <label className=\"linkedin-button cursor-pointer inline-flex items-center px-6 py-3 text-lg\">\n              <Upload className=\"w-5 h-5 mr-2\" />\n              Choose CSV File\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleCSVUpload}\n                className=\"hidden\"\n                disabled={uploading}\n              />\n            </label>\n            \n            {uploading && (\n              <div className=\"flex items-center text-gray-500\">\n                <RefreshCw className=\"w-5 h-5 mr-2 animate-spin\" />\n                Processing CSV...\n              </div>\n            )}\n          </div>\n\n          {/* Upload Status */}\n          {uploadMessage && (\n            <div className={`p-4 rounded-lg text-sm ${\n              uploadMessage.includes('Successfully') \n                ? 'bg-green-50 text-green-800 border border-green-200'\n                : 'bg-red-50 text-red-800 border border-red-200'\n            }`}>\n              {uploadMessage}\n            </div>\n          )}\n\n          {/* Instructions */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-blue-900 mb-2\">CSV Format Requirements</h3>\n            <p className=\"text-blue-800 text-sm mb-2\">\n              Your CSV should include these columns (from LinkedIn export):\n            </p>\n            <ul className=\"text-blue-800 text-sm list-disc list-inside space-y-1\">\n              <li><strong>Profile_Name</strong> - Full name of the alumni</li>\n              <li><strong>addressWithoutCountry</strong> - Location</li>\n              <li><strong>Profile_Picture_URL</strong> - LinkedIn profile picture URL</li>\n              <li><strong>High School</strong> - High school name</li>\n              <li><strong>DVHS class of</strong> - Graduation year</li>\n              <li><strong>College_1_Name, College_1_Degree, College_1_Logo</strong> - Primary college info</li>\n              <li><strong>Experience_1_Company, Experience_1_Role, Experience_1_Logo</strong> - Primary work experience</li>\n              <li>Additional college/experience columns (2, 3, 4) as available</li>\n            </ul>\n          </div>\n\n          {/* Current Status */}\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Current Status</h3>\n            <p className=\"text-gray-600 text-sm\">\n              Total profiles in database: <span className=\"font-semibold\">{profilesCount}</span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Links */}\n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <a\n          href=\"/\"\n          className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow text-center\"\n        >\n          <h3 className=\"font-semibold text-gray-900 mb-1\">Home</h3>\n          <p className=\"text-gray-600 text-sm\">View the main site</p>\n        </a>\n        \n        <a\n          href=\"/vote\"\n          className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow text-center\"\n        >\n          <h3 className=\"font-semibold text-gray-900 mb-1\">Vote</h3>\n          <p className=\"text-gray-600 text-sm\">Test the voting system</p>\n        </a>\n        \n        <a\n          href=\"/leaderboard\"\n          className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow text-center\"\n        >\n          <h3 className=\"font-semibold text-gray-900 mb-1\">Leaderboard</h3>\n          <p className=\"text-gray-600 text-sm\">View rankings</p>\n        </a>\n      </div>\n    </div>\n  )\n}","size_bytes":5556},"lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport interface AlumniProfile {\n  id: string\n  name: string\n  location: string\n  profile_picture_url?: string\n  high_school?: string\n  dvhs_class_of?: string\n  college_1_name?: string\n  college_1_degree?: string\n  college_1_logo?: string\n  college_2_name?: string\n  college_2_degree?: string\n  college_2_logo?: string\n  college_3_name?: string\n  college_3_degree?: string\n  college_3_logo?: string\n  experience_1_company?: string\n  experience_1_role?: string\n  experience_1_logo?: string\n  experience_2_company?: string\n  experience_2_role?: string\n  experience_2_logo?: string\n  experience_3_company?: string\n  experience_3_role?: string\n  experience_3_logo?: string\n  experience_4_company?: string\n  experience_4_role?: string\n  experience_4_logo?: string\n  linkedin_url?: string\n  elo: number\n  experiences: Experience[]\n  education: Education[]\n  created_at: string\n  updated_at: string\n}\n\nexport interface Experience {\n  id: string\n  alumni_id: string\n  role: string\n  company: string\n  company_logo?: string\n  order: number\n}\n\nexport interface Education {\n  id: string\n  alumni_id: string\n  school: string\n  degree: string\n  school_logo?: string\n  order: number\n}\n\nexport interface VoteSession {\n  id: string\n  session_id: string\n  alumni_1_id: string\n  alumni_2_id: string\n  winner_id?: string\n  voted_equal: boolean\n  created_at: string\n}\n\nexport interface EloHistory {\n  id: string\n  alumni_id: string\n  old_elo: number\n  new_elo: number\n  change: number\n  vote_session_id: string\n  created_at: string\n}\n","size_bytes":1762},"components/ProfilePicture.tsx":{"content":"'use client'\n\nimport { AlumniProfile } from '@/lib/supabase'\n\ninterface ProfilePictureProps {\n  profile: AlumniProfile\n  size?: 'sm' | 'md' | 'lg' | 'xl'\n  className?: string\n}\n\nconst sizeClasses = {\n  sm: 'w-8 h-8 text-sm',\n  md: 'w-12 h-12 text-base',\n  lg: 'w-16 h-16 text-lg',\n  xl: 'w-24 h-24 text-xl'\n}\n\nexport default function ProfilePicture({ profile, size = 'md', className = '' }: ProfilePictureProps) {\n  const initials = profile.name\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n\n  // Generate background color based on name hash\n  const colors = ['#0077B5', '#004182', '#0066CC', '#0052CC', '#003366']\n  const colorIndex = profile.name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length\n  const backgroundColor = colors[colorIndex]\n\n  // Use actual profile picture if available, otherwise show initials\n  if (profile.profile_picture_url) {\n    return (\n      <img\n        src={profile.profile_picture_url}\n        alt={profile.name}\n        className={`${sizeClasses[size]} rounded-full object-cover ${className}`}\n        onError={(e) => {\n          // Fallback to initials if image fails to load\n          const target = e.target as HTMLImageElement\n          target.style.display = 'none'\n          const parent = target.parentElement\n          if (parent) {\n            parent.innerHTML = `<div class=\"${sizeClasses[size]} rounded-full flex items-center justify-center text-white font-semibold\" style=\"background-color: ${backgroundColor}\">${initials}</div>`\n          }\n        }}\n      />\n    )\n  }\n\n  return (\n    <div \n      className={`${sizeClasses[size]} rounded-full flex items-center justify-center text-white font-semibold ${className}`}\n      style={{ backgroundColor }}\n    >\n      {initials}\n    </div>\n  )\n}\n","size_bytes":1806},"components/AlumniProfileCard.tsx":{"content":"'use client'\n\nimport { AlumniProfile } from '@/lib/supabase'\nimport ProfilePicture from './ProfilePicture'\nimport { ExternalLink, MapPin, Building, GraduationCap } from 'lucide-react'\nimport { LiquidGlassCard } from '@/components/ui/liquid-glass-button'\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\ninterface AlumniProfileCardProps {\n  profile: AlumniProfile\n  showElo?: boolean\n  showLinkedIn?: boolean\n  blurred?: boolean\n  eloChange?: number\n  className?: string\n  hoverLinkedIn?: boolean\n}\n\nexport default function AlumniProfileCard({ \n  profile, \n  showElo = false, \n  showLinkedIn = true, \n  blurred = false,\n  eloChange,\n  className = '',\n  hoverLinkedIn = false\n}: AlumniProfileCardProps) {\n  const primaryExperience = profile.experience_1_role && profile.experience_1_company \n    ? { role: profile.experience_1_role, company: profile.experience_1_company }\n    : profile.experiences?.[0]\n  const primaryEducation = profile.college_1_name && profile.college_1_degree\n    ? { school: profile.college_1_name, degree: profile.college_1_degree }\n    : profile.education?.[0]\n\n  const cardContent = (\n    <LiquidGlassCard transparent className={`profile-card ${hoverLinkedIn && profile.linkedin_url ? 'cursor-pointer hover:shadow-lg transition-shadow duration-200' : ''} ${className} ${inter.className}`}>\n      {hoverLinkedIn && profile.linkedin_url && (\n        <a\n          href={profile.linkedin_url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"absolute inset-0 z-10\"\n          title=\"View LinkedIn Profile\"\n        />\n      )}\n      <div className=\"flex flex-col sm:flex-row items-start sm:space-x-4 space-y-3 sm:space-y-0\">\n        <div className={`mx-auto sm:mx-0 ${blurred ? 'blur-content' : ''}`}>\n          <ProfilePicture profile={profile} size=\"xl\" />\n        </div>\n        <div className=\"flex-1 min-w-0 w-full\">\n          <div className=\"flex items-start justify-between gap-2\">\n            <h3 className={`text-sm sm:text-xl font-semibold break-words ${blurred ? 'blur-content text-gray-200' : 'text-white'}`}>\n              {profile.name}\n            </h3>\n            {showElo && (\n              <div className={`flex items-center space-x-1 flex-shrink-0 ${blurred ? 'blur-content' : ''}`}>\n                <span className=\"text-xs sm:text-lg font-bold text-white\">\n                  {profile.elo}\n                </span>\n                {eloChange !== undefined && eloChange !== 0 && (\n                  <span className={`text-xs ${eloChange > 0 ? 'elo-change-positive' : 'elo-change-negative'}`}>\n                    {eloChange > 0 ? '+' : ''}{eloChange}\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n\n          {primaryExperience && (\n            <div className={`mt-1 sm:mt-2 flex items-start ${blurred ? 'text-gray-200' : 'text-gray-300'}`}>\n              <Building className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 mt-0.5 flex-shrink-0\" />\n              <span className={`text-[10px] leading-tight sm:text-sm break-words ${blurred ? 'blur-content' : ''}`}>\n                {primaryExperience.role} at {primaryExperience.company}\n              </span>\n            </div>\n          )}\n\n          {profile.location && (\n            <div className={`mt-1 flex items-start ${blurred ? 'text-gray-200' : 'text-gray-400'}`}>\n              <MapPin className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 mt-0.5 flex-shrink-0\" />\n              <span className={`text-[10px] leading-tight sm:text-sm break-words ${blurred ? 'blur-content' : ''}`}>{profile.location}</span>\n            </div>\n          )}\n\n          {primaryEducation && (\n            <div className={`mt-1 sm:mt-2 flex items-start ${blurred ? 'text-gray-200' : 'text-gray-300'}`}>\n              <GraduationCap className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 mt-0.5 flex-shrink-0\" />\n              <span className={`text-[10px] leading-tight sm:text-sm break-words ${blurred ? 'blur-content' : ''}`}>\n                {primaryEducation.degree} at {primaryEducation.school}\n              </span>\n            </div>\n          )}\n\n          {showLinkedIn && profile.linkedin_url && !blurred && (\n            <div className=\"mt-3\">\n              <a\n                href={profile.linkedin_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center text-white hover:text-gray-300 text-xs sm:text-sm font-medium\"\n              >\n                <ExternalLink className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                View LinkedIn\n              </a>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Experience Section */}\n      {(profile.experiences && profile.experiences.length > 0) || profile.experience_1_role ? (\n        <div className=\"mt-3 sm:mt-6\">\n          <h4 className=\"text-[10px] sm:text-sm font-semibold text-white mb-1.5 sm:mb-3\">Experience</h4>\n          <div className=\"space-y-2 sm:space-y-3\">\n            {/* Show structured experience data first */}\n            {[\n              { role: profile.experience_1_role, company: profile.experience_1_company, logo: profile.experience_1_logo },\n              { role: profile.experience_2_role, company: profile.experience_2_company, logo: profile.experience_2_logo },\n              { role: profile.experience_3_role, company: profile.experience_3_company, logo: profile.experience_3_logo },\n              { role: profile.experience_4_role, company: profile.experience_4_company, logo: profile.experience_4_logo }\n            ].filter(exp => exp.role && exp.company).map((exp, index) => (\n              <div key={index} className=\"flex items-start space-x-2 sm:space-x-3\">\n                {exp.logo ? (\n                  <img src={exp.logo} alt={exp.company} className=\"w-6 h-6 sm:w-8 sm:h-8 rounded object-cover flex-shrink-0\" />\n                ) : (\n                  <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gray-200 rounded flex items-center justify-center flex-shrink-0\">\n                    <Building className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-600\" />\n                  </div>\n                )}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-[10px] leading-tight sm:text-sm font-medium text-white break-words\">{exp.role}</p>\n                  <p className=\"text-[10px] leading-tight sm:text-sm text-gray-300 break-words\">{exp.company}</p>\n                </div>\n              </div>\n            ))}\n            {/* Fallback to experiences array if no structured data */}\n            {!profile.experience_1_role && profile.experiences && profile.experiences.map((exp, index) => (\n              <div key={index} className=\"flex items-start space-x-2 sm:space-x-3\">\n                <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gray-200 rounded flex items-center justify-center flex-shrink-0\">\n                  <Building className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-600\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-[10px] leading-tight sm:text-sm font-medium text-white break-words\">{exp.role}</p>\n                  <p className=\"text-[10px] leading-tight sm:text-sm text-gray-300 break-words\">{exp.company}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : null}\n\n      {/* Education Section */}\n      {(profile.education && profile.education.length > 0) || profile.college_1_name ? (\n        <div className=\"mt-3 sm:mt-6\">\n          <h4 className=\"text-[10px] sm:text-sm font-semibold text-white mb-1.5 sm:mb-3\">Education</h4>\n          <div className=\"space-y-2 sm:space-y-3\">\n            {/* Show structured education data first */}\n            {[\n              { school: profile.college_1_name, degree: profile.college_1_degree, logo: profile.college_1_logo },\n              { school: profile.college_2_name, degree: profile.college_2_degree, logo: profile.college_2_logo },\n              { school: profile.college_3_name, degree: profile.college_3_degree, logo: profile.college_3_logo }\n            ].filter(edu => edu.school && edu.degree).map((edu, index) => (\n              <div key={index} className=\"flex items-start space-x-2 sm:space-x-3\">\n                {edu.logo ? (\n                  <img src={edu.logo} alt={edu.school} className=\"w-6 h-6 sm:w-8 sm:h-8 rounded object-cover flex-shrink-0\" />\n                ) : (\n                  <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gray-200 rounded flex items-center justify-center flex-shrink-0\">\n                    <GraduationCap className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-600\" />\n                  </div>\n                )}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-[10px] leading-tight sm:text-sm font-medium text-white break-words\">{edu.school}</p>\n                  <p className=\"text-[10px] leading-tight sm:text-sm text-gray-300 break-words\">{edu.degree}</p>\n                </div>\n              </div>\n            ))}\n            {/* Fallback to education array if no structured data */}\n            {!profile.college_1_name && profile.education && profile.education.map((edu, index) => (\n              <div key={index} className=\"flex items-start space-x-2 sm:space-x-3\">\n                <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gray-200 rounded flex items-center justify-center flex-shrink-0\">\n                  <GraduationCap className=\"w-3 h-3 sm:w-4 sm:h-4 text-gray-600\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-[10px] leading-tight sm:text-sm font-medium text-white break-words\">{edu.school}</p>\n                  <p className=\"text-[10px] leading-tight sm:text-sm text-gray-300 break-words\">{edu.degree}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : null}\n    </LiquidGlassCard>\n  )\n\n  return cardContent\n}\n","size_bytes":9947},"replit.md":{"content":"# DVHS Alumni Ranking\n\n## Overview\nA Next.js application for ranking DVHS alumni profiles using an ELO rating system. Users can vote between randomly selected alumni profiles to determine who's more \"cracked\", with live rankings updated in real-time.\n\n## Recent Changes\n**October 16, 2025** - Custom Scrollbar for Leaderboard\n- Added visible, draggable scrollbar to leaderboard and search results\n- Fixed max-height of 600px for the results list with overflow scrolling\n- Custom blue gradient scrollbar design matching the app theme\n- Easy to grab and drag for better navigation through long lists\n- Works on both desktop and mobile devices\n\n**October 16, 2025** - Bright Blue Gradient Background\n- Enhanced animated wave background with vibrant blue gradient\n- Gradient flows from dark blue → medium blue → sky blue\n- Increased line opacity from 0.15-0.4 to 0.6-0.8 for better visibility\n- Creates a modern, energetic visual effect while maintaining elegance\n\n**October 16, 2025** - iOS Mobile Scrolling Fix (Final)\n- **Fixed critical iOS scrolling bug** preventing users from scrolling on iPhone\n- Root cause: LiquidGlassCard's absolute glass overlay layers were intercepting touch events on iOS Safari before they reached the scrollable container\n- Solution implemented:\n  - Added `pointer-events-none` to both absolute glass overlay layers in LiquidGlassCard component\n  - Added `-webkit-overflow-scrolling: touch` to leaderboard scrollable container for iOS momentum scrolling\n  - Added `overscroll-behavior: contain` to prevent scroll chaining issues\n  - Simplified root layout to use natural body scrolling instead of complex absolute positioning\n  - Kept `pointer-events-none` on Waves background to prevent touch event blocking\n- **Result**: Users can now scroll leaderboard lists, search results, and all content on iPhone\n\n**October 15, 2025** - Cool Loader & Initial Mobile Scrolling Attempts\n- Created custom triple-ring orbital loader with gradient animations (blue→purple→pink)\n- Replaced all basic spinners with cool loader across vote, leaderboard, and search pages\n- Attempted multiple mobile scrolling fixes (complex positioning, touch overlays)\n- Note: Final fix required removing overflow-hidden from UI components (see October 16 update)\n\n**October 15, 2025** - Premium Black & Gradient Design Update\n- Changed background from beige to pure black (#000000) for modern, premium look\n- Implemented dynamic gradient wave lines transitioning from blue → purple → pink\n- Updated all text colors to white/light shades for optimal contrast on black background\n- Rounded all button edges (rounded-full) for softer, more modern appearance\n- Applied liquid glass frosted effect to all UI components with enhanced shadow depth\n- Changed main site font to Outfit (modern, geometric sans-serif similar to Audit Sans)\n- Made vote profile cards highly transparent with blur effect for elegant presentation\n- Changed all button text from blue to white for better readability\n- Integrated DVHS school crest logo and DV logo into homescreen branding\n\n**October 14, 2025** - Migrated from Vercel to Replit\n- Configured Next.js to run on port 5000 with host 0.0.0.0 for Replit compatibility\n- Set up Supabase environment variables (NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY)\n- Configured development workflow to run Next.js dev server\n- Set up deployment configuration for production (autoscale)\n\n## Project Architecture\n\n### Tech Stack\n- **Framework**: Next.js 14 (App Router)\n- **Database**: Supabase (PostgreSQL)\n- **Styling**: Tailwind CSS\n- **Language**: TypeScript\n- **Package Manager**: npm\n\n### Key Features\n- ELO-based ranking system for alumni profiles\n- Real-time updates using Supabase subscriptions\n- Alumni search functionality using Fuse.js\n- Admin panel for data management\n- CSV import for bulk alumni data\n\n### Design System\n- **Color Scheme**: Black background (#000000) with gradient accents\n- **Gradient Flow**: Blue (#3B82F6) → Purple (#A855F7) → Pink (#EC4899)\n- **UI Components**: Liquid glass/frosted glass aesthetic with backdrop blur effects\n- **Typography**: \n  - Main font: Outfit (modern, geometric sans-serif similar to Audit Sans)\n  - Vote profile font: Inter (clean, readable for profile data)\n  - All text in white/light colors for maximum contrast\n- **Interactive Elements**: Fully rounded buttons and inputs with smooth transitions\n- **Vote Cards**: Ultra-transparent with 3% white background and medium blur for elegant presentation\n- **Branding**: DVHS logo displayed on homescreen with 80% opacity for subtle integration\n- **Loading States**: Custom triple-ring orbital loader with counter-rotating animations and gradient colors\n- **Mobile Optimization**: Smooth touch scrolling with proper overflow handling for all devices\n\n### Directory Structure\n- `/app` - Next.js App Router pages\n  - `/admin` - Admin panel\n  - `/leaderboard` - Rankings display\n  - `/vote` - Voting interface\n- `/components` - React components\n- `/hooks` - Custom React hooks\n- `/lib` - Utility functions and API logic\n  - Database operations\n  - ELO calculations\n  - CSV parsing\n  - Supabase client\n\n## Environment Configuration\nThe application requires three Supabase environment variables:\n- `NEXT_PUBLIC_SUPABASE_URL` - Supabase project URL\n- `NEXT_PUBLIC_SUPABASE_ANON_KEY` - Public API key\n- `SUPABASE_SERVICE_ROLE_KEY` - Admin API key (server-side only)\n\n## Development\n- **Dev Server**: Runs on port 5000 with `npm run dev`\n- **Build**: `npm run build`\n- **Production**: `npm run start` (port 5000)\n\n## Deployment\nConfigured for Replit autoscale deployment:\n- Build command: `npm run build`\n- Start command: `npm run start`\n","size_bytes":5704},"app/vote/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { AlumniProfile } from '@/lib/supabase'\nimport AlumniProfileCard from '@/components/AlumniProfileCard'\nimport { VotingService, VotingPair } from '@/lib/voting'\nimport { ArrowRight, RotateCcw, Trophy, Home, TrendingUp } from 'lucide-react'\nimport { LiquidButton } from '@/components/ui/liquid-glass-button'\nimport { CoolLoader } from '@/components/ui/cool-loader'\n\nexport default function VotePage() {\n  const [votingPair, setVotingPair] = useState<VotingPair | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [voted, setVoted] = useState(false)\n  const [selectedWinner, setSelectedWinner] = useState<string | null>(null)\n  const [votingEqual, setVotingEqual] = useState(false)\n  const [eloChanges, setEloChanges] = useState<{\n    profile1: { oldElo: number; newElo: number; change: number }\n    profile2: { oldElo: number; newElo: number; change: number }\n  } | null>(null)\n\n  const loadNewPair = async () => {\n    setLoading(true)\n    setVoted(false)\n    setSelectedWinner(null)\n    setVotingEqual(false)\n    setEloChanges(null)\n    \n    try {\n      const pair = await VotingService.getRandomPair()\n      setVotingPair(pair)\n    } catch (error) {\n      console.error('Error loading voting pair:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleVote = async (winnerId?: string) => {\n    if (!votingPair) return\n\n    setSelectedWinner(winnerId || null)\n    setVotingEqual(!winnerId)\n    setVoted(true)\n\n    try {\n      const result = await VotingService.submitVote(\n        votingPair.profile1.id,\n        votingPair.profile2.id,\n        votingPair.sessionId,\n        winnerId\n      )\n      \n      setEloChanges(result.eloChanges)\n    } catch (error) {\n      console.error('Error submitting vote:', error)\n    }\n  }\n\n  useEffect(() => {\n    loadNewPair()\n  }, [])\n\n  if (loading) {\n    return (\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center py-12\">\n          <div className=\"flex justify-center mb-4\">\n            <CoolLoader size=\"lg\" />\n          </div>\n          <p className=\"text-gray-300\">Loading voting pair...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!votingPair) {\n    return (\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center py-12\">\n          <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">No Profiles Available</h2>\n          <p className=\"text-gray-600 mb-6\">There aren't enough alumni profiles to create a voting pair.</p>\n          <button\n            onClick={loadNewPair}\n            className=\"linkedin-button\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      {/* Navigation Buttons */}\n      <div className=\"absolute top-6 left-6 flex space-x-3\">\n        <LiquidButton asChild size=\"lg\">\n          <a href=\"/\" className=\"inline-flex items-center font-medium rounded-full\">\n            <Home className=\"w-5 h-5 mr-2\" />\n            Home\n          </a>\n        </LiquidButton>\n        <LiquidButton asChild size=\"lg\" variant=\"primary\">\n          <a href=\"/vote\" className=\"inline-flex items-center font-medium rounded-full\">\n            <Trophy className=\"w-5 h-5 mr-2\" />\n            Vote\n          </a>\n        </LiquidButton>\n        <LiquidButton asChild size=\"lg\">\n          <a href=\"/leaderboard\" className=\"inline-flex items-center font-medium rounded-full\">\n            <TrendingUp className=\"w-5 h-5 mr-2\" />\n            Leaderboard\n          </a>\n        </LiquidButton>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto pt-16\">\n        <div className=\"text-center mb-8\">\n          <p className=\"text-gray-300\">\n            Vote between these two DVHS alumni profiles\n          </p>\n        </div>\n\n        <div className=\"relative flex justify-center items-center\">\n          {/* Profiles Container */}\n          <div className=\"grid grid-cols-2 gap-4 sm:gap-8 w-full max-w-5xl\">\n            {/* Profile 1 */}\n            <div className=\"relative\">\n              <div className={`${!voted ? 'pointer-events-none' : ''} transition-all duration-200`}>\n                <AlumniProfileCard\n                  profile={votingPair.profile1}\n                  showElo={voted}\n                  showLinkedIn={voted}\n                  blurred={!voted}\n                  eloChange={eloChanges?.profile1.change}\n                  hoverLinkedIn={voted}\n                />\n              </div>\n              {!voted && (\n                <button\n                  onClick={() => handleVote(votingPair.profile1.id)}\n                  className=\"absolute inset-0 w-full h-full z-50 bg-transparent hover:bg-white/10 cursor-pointer rounded-lg transition-colors duration-200\"\n                />\n              )}\n            </div>\n\n            {/* Profile 2 */}\n            <div className=\"relative\">\n              <div className={`${!voted ? 'pointer-events-none' : ''} transition-all duration-200`}>\n                <AlumniProfileCard\n                  profile={votingPair.profile2}\n                  showElo={voted}\n                  showLinkedIn={voted}\n                  blurred={!voted}\n                  eloChange={eloChanges?.profile2.change}\n                  hoverLinkedIn={voted}\n                />\n              </div>\n              {!voted && (\n                <button\n                  onClick={() => handleVote(votingPair.profile2.id)}\n                  className=\"absolute inset-0 w-full h-full z-50 bg-transparent hover:bg-white/10 cursor-pointer rounded-lg transition-colors duration-200\"\n                />\n              )}\n            </div>\n          </div>\n\n          {/* Center Action Button */}\n          <div className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 z-20\">\n            {!voted ? (\n              <LiquidButton\n                onClick={() => handleVote()}\n                className=\"w-20 h-20 sm:w-24 sm:h-24 rounded-full text-sm sm:text-base\"\n              >\n                Equal\n              </LiquidButton>\n            ) : (\n              <LiquidButton\n                onClick={loadNewPair}\n                variant=\"primary\"\n                className=\"w-20 h-20 sm:w-24 sm:h-24 rounded-full\"\n              >\n                <ArrowRight className=\"w-6 h-6 sm:w-8 sm:h-8\" />\n              </LiquidButton>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":6529},"components/ui/liquid-glass-button.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst liquidbuttonVariants = cva(\n  \"inline-flex items-center transition-colors justify-center cursor-pointer gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent hover:scale-105 duration-300 transition text-white\",\n        primary: \"bg-transparent hover:scale-105 duration-300 transition text-white\",\n        outline: \"bg-transparent hover:scale-105 duration-300 transition text-white\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 text-xs gap-1.5 px-4 has-[>svg]:px-4\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        xl: \"h-12 rounded-md px-8 has-[>svg]:px-6\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport function LiquidButton({\n  className,\n  variant,\n  size,\n  asChild = false,\n  children,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof liquidbuttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  const liquidGlassStyles = \"shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\"\n\n  return (\n    <>\n      <Comp\n        data-slot=\"button\"\n        className={cn(\n          \"relative backdrop-blur-sm bg-white/10 rounded-full\",\n          liquidGlassStyles,\n          liquidbuttonVariants({ variant, size, className })\n        )}\n        {...props}\n      >\n        {children}\n      </Comp>\n      <GlassFilter />\n    </>\n  )\n}\n\nfunction GlassFilter() {\n  return (\n    <svg className=\"hidden\">\n      <defs>\n        <filter\n          id=\"container-glass\"\n          x=\"0%\"\n          y=\"0%\"\n          width=\"100%\"\n          height=\"100%\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feTurbulence\n            type=\"fractalNoise\"\n            baseFrequency=\"0.05 0.05\"\n            numOctaves=\"1\"\n            seed=\"1\"\n            result=\"turbulence\"\n          />\n\n          <feGaussianBlur in=\"turbulence\" stdDeviation=\"2\" result=\"blurredNoise\" />\n\n          <feDisplacementMap\n            in=\"SourceGraphic\"\n            in2=\"blurredNoise\"\n            scale=\"70\"\n            xChannelSelector=\"R\"\n            yChannelSelector=\"B\"\n            result=\"displaced\"\n          />\n\n          <feGaussianBlur in=\"displaced\" stdDeviation=\"4\" result=\"finalBlur\" />\n\n          <feComposite in=\"finalBlur\" in2=\"finalBlur\" operator=\"over\" />\n        </filter>\n      </defs>\n    </svg>\n  );\n}\n\nexport function LiquidGlassCard({ children, className, transparent = false }: { children: React.ReactNode, className?: string, transparent?: boolean }) {\n  return (\n    <div className={cn(\"relative\", className)}>\n      <div className={cn(\n        \"absolute top-0 left-0 z-0 h-full w-full rounded-2xl transition-all backdrop-blur-md pointer-events-none\",\n        transparent \n          ? \"bg-white/[0.03] shadow-[0_0_30px_rgba(0,0,0,0.6),inset_0_0_30px_rgba(255,255,255,0.08)]\" \n          : \"bg-white/10 shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\"\n      )} />\n      <div\n        className=\"absolute top-0 left-0 isolate -z-10 h-full w-full overflow-hidden rounded-2xl pointer-events-none\"\n        style={{ backdropFilter: 'url(\"#container-glass\")' }}\n      />\n      <div className=\"relative z-10\">\n        {children}\n      </div>\n      <GlassFilter />\n    </div>\n  )\n}\n\nexport function LiquidGlassInput({ className, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <div className=\"relative\">\n      <div className=\"absolute top-0 left-0 z-0 h-full w-full rounded-full \n          shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] \n      transition-all \n      dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\" />\n      <div\n        className=\"absolute top-0 left-0 isolate -z-10 h-full w-full overflow-hidden rounded-full\"\n        style={{ backdropFilter: 'url(\"#container-glass\")' }}\n      />\n      <input\n        className={cn(\n          \"relative z-10 w-full bg-transparent px-4 py-3 outline-none text-white placeholder:text-gray-400\",\n          className\n        )}\n        {...props}\n      />\n      <GlassFilter />\n    </div>\n  )\n}\n","size_bytes":6457},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  images: {\n    domains: ['media.licdn.com', 'static.licdn.com', 'profile-images.xing.com'],\n  },\n}\n\nmodule.exports = nextConfig\n\n","size_bytes":192},"components/ui/cool-loader.tsx":{"content":"export function CoolLoader({ size = \"md\" }: { size?: \"sm\" | \"md\" | \"lg\" }) {\n  const sizeClasses = {\n    sm: \"w-6 h-6\",\n    md: \"w-12 h-12\",\n    lg: \"w-16 h-16\"\n  }\n\n  return (\n    <div className=\"relative inline-block\">\n      <div className={`${sizeClasses[size]} relative`}>\n        {/* Outer rotating ring */}\n        <div className=\"absolute inset-0 rounded-full border-2 border-transparent border-t-blue-500 border-r-purple-500 animate-spin\"></div>\n        \n        {/* Middle rotating ring - opposite direction */}\n        <div className=\"absolute inset-1 rounded-full border-2 border-transparent border-b-purple-500 border-l-pink-500 animate-spin\" style={{ animationDirection: 'reverse', animationDuration: '1s' }}></div>\n        \n        {/* Inner pulsing dot */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-2 h-2 rounded-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 animate-pulse\"></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":1020},"components/SearchBar.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { Search, X } from 'lucide-react'\nimport { LiquidGlassInput } from '@/components/ui/liquid-glass-button'\n\ninterface SearchBarProps {\n  onSearch: (query: string) => void\n  placeholder?: string\n  className?: string\n}\n\nexport default function SearchBar({ \n  onSearch, \n  placeholder = \"Search alumni by name, company, school, or role...\",\n  className = \"\"\n}: SearchBarProps) {\n  const [query, setQuery] = useState('')\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSearch(query)\n  }\n\n  const handleClear = () => {\n    setQuery('')\n    onSearch('')\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className={`relative ${className}`}>\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5 z-20\" />\n        <LiquidGlassInput\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder={placeholder}\n          className=\"pl-10 pr-10\"\n        />\n        {query && (\n          <button\n            type=\"button\"\n            onClick={handleClear}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 z-20\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        )}\n      </div>\n    </form>\n  )\n}\n\n","size_bytes":1392},"app/layout.tsx":{"content":"'use client'\n\nimport type { Metadata } from 'next'\nimport { Outfit } from 'next/font/google'\nimport './globals.css'\nimport RealtimeIndicator from '@/components/RealtimeIndicator'\nimport { Waves } from '@/components/ui/waves-background'\n\nconst outfit = Outfit({ subsets: ['latin'] })\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={outfit.className}>\n        <Waves\n          lineColor=\"rgba(0, 119, 181, 0.15)\"\n          backgroundColor=\"transparent\"\n          waveSpeedX={0.02}\n          waveSpeedY={0.01}\n          waveAmpX={40}\n          waveAmpY={20}\n          friction={0.9}\n          tension={0.01}\n          maxCursorMove={120}\n          xGap={12}\n          yGap={36}\n          className=\"fixed inset-0 z-0 pointer-events-none\"\n        />\n        <main className=\"relative z-10 min-h-screen\">\n          {children}\n        </main>\n        <RealtimeIndicator />\n      </body>\n    </html>\n  )\n}\n","size_bytes":994},"lib/csv-parser.ts":{"content":"import Papa from 'papaparse'\nimport { AlumniData, ParsedAlumniProfile } from './types'\n\nexport function parseCSV(csvContent: string): AlumniData[] {\n  const result = Papa.parse(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.trim()\n  })\n\n  return result.data.map((row: any) => ({\n    Profile_Name: row['Profile_Name']?.trim() || '',\n    addressWithoutCountry: row['addressWithoutCountry']?.trim() || '',\n    Profile_Picture_URL: row['Profile_Picture_URL']?.trim() || '',\n    High_School: row['High School ']?.trim() || row['High_School']?.trim() || '',\n    DVHS_class_of: row['DVHS class of ']?.trim() || row['DVHS_class_of']?.trim() || '',\n    College_1_Name: row['College_1_Name']?.trim() || '',\n    College_1_Degree: row['College_1_Degree']?.trim() || '',\n    College_1_Logo: row['College_1_Logo']?.trim() || '',\n    College_2_Name: row['College_2_Name']?.trim() || '',\n    College_2_Degree: row['College_2_Degree']?.trim() || '',\n    College_2_Logo: row['College_2_Logo']?.trim() || '',\n    College_3_Name: row['College_3_Name']?.trim() || '',\n    College_3_Degree: row['College_3_Degree']?.trim() || '',\n    College_3_Logo: row['College_3_Logo']?.trim() || '',\n    Experience_1_Company: row['Experience_1_Company']?.trim() || '',\n    Experience_1_Role: row['Experience_1_Role']?.trim() || '',\n    Experience_1_Logo: row['Experience_1_Logo']?.trim() || '',\n    Experience_2_Company: row['Experience_2_Company']?.trim() || '',\n    Experience_2_Role: row['Experience_2_Role']?.trim() || '',\n    Experience_2_Logo: row['Experience_2_Logo']?.trim() || '',\n    Experience_3_Company: row['Experience_3_Company']?.trim() || '',\n    Experience_3_Role: row['Experience_3_Role']?.trim() || '',\n    Experience_3_Logo: row['Experience_3_Logo']?.trim() || '',\n    Experience_4_Company: row['Experience_4_Company']?.trim() || '',\n    Experience_4_Role: row['Experience_4_Role']?.trim() || '',\n    Experience_4_Logo: row['Experience_4_Logo']?.trim() || '',\n    linkedinUrl: row['linkedinUrl']?.trim() || ''\n  })).filter(alumni => alumni.Profile_Name)\n}\n\nexport function parseExperiencesAndEducation(alumni: AlumniData): ParsedAlumniProfile {\n  // Parse experiences from the structured columns\n  const experiences = []\n  \n  if (alumni.Experience_1_Company && alumni.Experience_1_Role) {\n    experiences.push({\n      role: alumni.Experience_1_Role,\n      company: alumni.Experience_1_Company,\n      logo: alumni.Experience_1_Logo\n    })\n  }\n  if (alumni.Experience_2_Company && alumni.Experience_2_Role) {\n    experiences.push({\n      role: alumni.Experience_2_Role,\n      company: alumni.Experience_2_Company,\n      logo: alumni.Experience_2_Logo\n    })\n  }\n  if (alumni.Experience_3_Company && alumni.Experience_3_Role) {\n    experiences.push({\n      role: alumni.Experience_3_Role,\n      company: alumni.Experience_3_Company,\n      logo: alumni.Experience_3_Logo\n    })\n  }\n  if (alumni.Experience_4_Company && alumni.Experience_4_Role) {\n    experiences.push({\n      role: alumni.Experience_4_Role,\n      company: alumni.Experience_4_Company,\n      logo: alumni.Experience_4_Logo\n    })\n  }\n\n  // Parse education from the structured columns\n  const education = []\n  \n  if (alumni.College_1_Name && alumni.College_1_Degree) {\n    education.push({\n      school: alumni.College_1_Name,\n      degree: alumni.College_1_Degree,\n      logo: alumni.College_1_Logo\n    })\n  }\n  if (alumni.College_2_Name && alumni.College_2_Degree) {\n    education.push({\n      school: alumni.College_2_Name,\n      degree: alumni.College_2_Degree,\n      logo: alumni.College_2_Logo\n    })\n  }\n  if (alumni.College_3_Name && alumni.College_3_Degree) {\n    education.push({\n      school: alumni.College_3_Name,\n      degree: alumni.College_3_Degree,\n      logo: alumni.College_3_Logo\n    })\n  }\n\n  return {\n    name: alumni.Profile_Name,\n    location: alumni.addressWithoutCountry,\n    profile_picture_url: alumni.Profile_Picture_URL,\n    high_school: alumni.High_School,\n    dvhs_class_of: alumni.DVHS_class_of,\n    college_1_name: alumni.College_1_Name,\n    college_1_degree: alumni.College_1_Degree,\n    college_1_logo: alumni.College_1_Logo,\n    college_2_name: alumni.College_2_Name,\n    college_2_degree: alumni.College_2_Degree,\n    college_2_logo: alumni.College_2_Logo,\n    college_3_name: alumni.College_3_Name,\n    college_3_degree: alumni.College_3_Degree,\n    college_3_logo: alumni.College_3_Logo,\n    experience_1_company: alumni.Experience_1_Company,\n    experience_1_role: alumni.Experience_1_Role,\n    experience_1_logo: alumni.Experience_1_Logo,\n    experience_2_company: alumni.Experience_2_Company,\n    experience_2_role: alumni.Experience_2_Role,\n    experience_2_logo: alumni.Experience_2_Logo,\n    experience_3_company: alumni.Experience_3_Company,\n    experience_3_role: alumni.Experience_3_Role,\n    experience_3_logo: alumni.Experience_3_Logo,\n    experience_4_company: alumni.Experience_4_Company,\n    experience_4_role: alumni.Experience_4_Role,\n    experience_4_logo: alumni.Experience_4_Logo,\n    linkedin_url: alumni.linkedinUrl,\n    experiences,\n    education\n  }\n}\n\nexport function generateProfilePicture(name: string): string {\n  // Generate initials for profile picture placeholder\n  const initials = name\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n  \n  // Create a data URL for a simple avatar with initials\n  const canvas = document.createElement('canvas')\n  canvas.width = 150\n  canvas.height = 150\n  const ctx = canvas.getContext('2d')!\n  \n  // Background color based on name hash\n  const colors = ['#0077B5', '#004182', '#0066CC', '#0052CC', '#003366']\n  const colorIndex = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length\n  ctx.fillStyle = colors[colorIndex]\n  ctx.fillRect(0, 0, 150, 150)\n  \n  // White text\n  ctx.fillStyle = 'white'\n  ctx.font = 'bold 48px Arial'\n  ctx.textAlign = 'center'\n  ctx.textBaseline = 'middle'\n  ctx.fillText(initials, 75, 75)\n  \n  return canvas.toDataURL()\n}\n\nexport function generateBio(profile: ParsedAlumniProfile): string {\n  const primaryRole = profile.experiences[0]?.role || 'Professional'\n  const primaryCompany = profile.experiences[0]?.company || 'Company'\n  const primaryDegree = profile.education[0]?.degree || 'Degree'\n  const primarySchool = profile.education[0]?.school || 'School'\n  \n  return `${primaryRole} at ${primaryCompany} in ${profile.location}. Studied ${primaryDegree} at ${primarySchool}`\n}\n","size_bytes":6479},"components/RealtimeIndicator.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRealtimeUpdates } from '@/hooks/useRealtimeUpdates'\nimport { Activity, Users, TrendingUp } from 'lucide-react'\n\nexport default function RealtimeIndicator() {\n  const { updates } = useRealtimeUpdates()\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    if (updates.length > 0) {\n      setIsVisible(true)\n      const timer = setTimeout(() => setIsVisible(false), 3000)\n      return () => clearTimeout(timer)\n    }\n  }, [updates])\n\n  if (!isVisible || updates.length === 0) return null\n\n  const latestUpdate = updates[updates.length - 1]\n\n  const getUpdateIcon = (type: string) => {\n    switch (type) {\n      case 'elo_change':\n        return <TrendingUp className=\"w-4 h-4\" />\n      case 'new_vote':\n        return <Users className=\"w-4 h-4\" />\n      default:\n        return <Activity className=\"w-4 h-4\" />\n    }\n  }\n\n  const getUpdateMessage = (type: string) => {\n    switch (type) {\n      case 'elo_change':\n        return 'ELO ratings updated!'\n      case 'new_vote':\n        return 'New vote recorded!'\n      default:\n        return 'Live update!'\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-linkedin-blue text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2 z-50 animate-pulse\">\n      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-ping\"></div>\n      {getUpdateIcon(latestUpdate.type)}\n      <span className=\"text-sm font-medium\">{getUpdateMessage(latestUpdate.type)}</span>\n    </div>\n  )\n}\n\n","size_bytes":1545},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        linkedin: {\n          blue: '#0077B5',\n          dark: '#004182',\n          light: '#E7F3FF',\n        },\n        gray: {\n          50: '#F3F2EF',\n          100: '#E7E5DD',\n          200: '#DAD7CC',\n          300: '#CDC9BB',\n          400: '#C0BAAA',\n          500: '#B3AB99',\n          600: '#8F8A7A',\n          700: '#6B695B',\n          800: '#47483C',\n          900: '#23271D',\n        }\n      },\n      fontFamily: {\n        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],\n      },\n      animation: {\n        'wave-pulse': 'wave-pulse 4s ease-in-out infinite',\n      },\n      keyframes: {\n        'wave-pulse': {\n          '0%, 100%': { opacity: '0.4' },\n          '50%': { opacity: '0.7' },\n        },\n      },\n    },\n  },\n  plugins: [],\n}\n\n","size_bytes":1032},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n\n","size_bytes":83},"app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  html {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n  }\n  \n  body {\n    @apply bg-black text-white;\n    min-height: 100vh;\n    -webkit-overflow-scrolling: touch;\n  }\n  \n  * {\n    -webkit-tap-highlight-color: transparent;\n  }\n}\n\n@layer components {\n  .linkedin-button {\n    @apply bg-linkedin-blue text-white px-6 py-2 rounded-full font-semibold hover:bg-linkedin-dark transition-colors duration-200;\n  }\n  \n  .linkedin-button-outline {\n    @apply border-2 border-linkedin-blue text-linkedin-blue px-6 py-2 rounded-full font-semibold hover:bg-linkedin-light transition-colors duration-200;\n  }\n  \n  .profile-card {\n    @apply p-6;\n  }\n  \n  .search-input {\n    @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-linkedin-blue focus:border-transparent;\n  }\n  \n  .blur-content {\n    @apply blur-md select-none pointer-events-none;\n  }\n  \n  .elo-change-positive {\n    @apply text-green-600 font-semibold;\n  }\n  \n  .elo-change-negative {\n    @apply text-red-600 font-semibold;\n  }\n\n  /* Custom Scrollbar Styles */\n  .scrollbar-custom::-webkit-scrollbar {\n    width: 12px;\n  }\n\n  .scrollbar-custom::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 10px;\n  }\n\n  .scrollbar-custom::-webkit-scrollbar-thumb {\n    background: linear-gradient(180deg, #3B82F6 0%, #2563EB 100%);\n    border-radius: 10px;\n    border: 2px solid rgba(255, 255, 255, 0.05);\n  }\n\n  .scrollbar-custom::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(180deg, #60A5FA 0%, #3B82F6 100%);\n  }\n\n  .scrollbar-custom::-webkit-scrollbar-thumb:active {\n    background: linear-gradient(180deg, #93C5FD 0%, #60A5FA 100%);\n  }\n}\n\n","size_bytes":1894},"lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"lib/admin.ts":{"content":"import { supabase } from './supabase'\nimport { parseCSV, parseExperiencesAndEducation } from './csv-parser'\nimport { AlumniProfile, Experience, Education } from './supabase'\n\nexport interface AdminStats {\n  totalProfiles: number\n  totalVotes: number\n  totalSessions: number\n  averageElo: number\n  topProfile: AlumniProfile | null\n  recentActivity: {\n    votesToday: number\n    newProfilesToday: number\n    averageEloChangeToday: number\n  }\n}\n\nexport interface VoteAnalytics {\n  sessionId: string\n  timestamp: string\n  profile1Name: string\n  profile2Name: string\n  winnerName?: string\n  votedEqual: boolean\n  eloChanges: {\n    profile1: number\n    profile2: number\n  }\n}\n\nexport class AdminService {\n  static async getStats(): Promise<AdminStats> {\n    try {\n      // Get basic counts with error handling\n      const [\n        { count: totalProfiles, error: profilesError },\n        { count: totalVotes, error: votesError },\n        { count: totalSessions, error: sessionsError },\n        { data: profiles, error: eloError },\n        { data: topProfile, error: topProfileError }\n      ] = await Promise.all([\n        supabase.from('alumni_profiles').select('*', { count: 'exact', head: true }),\n        supabase.from('vote_sessions').select('*', { count: 'exact', head: true }),\n        supabase.from('vote_sessions').select('*', { count: 'exact', head: true }),\n        supabase.from('alumni_profiles').select('elo'),\n        supabase.from('alumni_profiles').select(`\n          *,\n          experiences (*),\n          education (*)\n        `).order('elo', { ascending: false }).limit(1).maybeSingle()\n      ])\n\n      // Log any errors for debugging\n      if (profilesError) console.error('Error getting profiles count:', profilesError)\n      if (votesError) console.error('Error getting votes count:', votesError)\n      if (sessionsError) console.error('Error getting sessions count:', sessionsError)\n      if (eloError) console.error('Error getting ELO data:', eloError)\n      if (topProfileError) console.error('Error getting top profile:', topProfileError)\n\n      // Calculate average ELO\n      const averageElo = profiles && profiles.length > 0 ? \n        Math.round(profiles.reduce((sum, p) => sum + p.elo, 0) / profiles.length) : 2000\n\n      // Get today's activity\n      const today = new Date()\n      today.setHours(0, 0, 0, 0)\n\n      const [\n        { count: votesToday, error: votesTodayError },\n        { count: newProfilesToday, error: newProfilesTodayError },\n        { data: eloChangesToday, error: eloChangesTodayError }\n      ] = await Promise.all([\n        supabase.from('vote_sessions').select('*', { count: 'exact', head: true }).gte('created_at', today.toISOString()),\n        supabase.from('alumni_profiles').select('*', { count: 'exact', head: true }).gte('created_at', today.toISOString()),\n        supabase.from('elo_history').select('change_amount').gte('created_at', today.toISOString())\n      ])\n\n      // Log errors for today's activity\n      if (votesTodayError) console.error('Error getting votes today:', votesTodayError)\n      if (newProfilesTodayError) console.error('Error getting new profiles today:', newProfilesTodayError)\n      if (eloChangesTodayError) console.error('Error getting ELO changes today:', eloChangesTodayError)\n\n      const averageEloChangeToday = eloChangesToday && eloChangesToday.length > 0 ? \n        Math.round(eloChangesToday.reduce((sum, change) => sum + change.change_amount, 0) / eloChangesToday.length) : 0\n\n      return {\n        totalProfiles: totalProfiles || 0,\n        totalVotes: totalVotes || 0,\n        totalSessions: totalSessions || 0,\n        averageElo,\n        topProfile: topProfile || null,\n        recentActivity: {\n          votesToday: votesToday || 0,\n          newProfilesToday: newProfilesToday || 0,\n          averageEloChangeToday\n        }\n      }\n    } catch (error) {\n      console.error('Error getting admin stats:', error)\n      throw error\n    }\n  }\n\n  static async getVoteAnalytics(limit: number = 50): Promise<VoteAnalytics[]> {\n    try {\n      const { data, error } = await supabase\n        .from('vote_sessions')\n        .select(`\n          id,\n          session_id,\n          created_at,\n          alumni_1_id,\n          alumni_2_id,\n          winner_id,\n          voted_equal,\n          alumni_profiles!vote_sessions_alumni_1_id_fkey(name),\n          alumni_profiles!vote_sessions_alumni_2_id_fkey(name),\n          alumni_profiles!vote_sessions_winner_id_fkey(name),\n          elo_history(change_amount)\n        `)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n      if (error) throw error\n\n      return (data || []).map(session => ({\n        sessionId: session.session_id,\n        timestamp: session.created_at,\n        profile1Name: 'Unknown', // TODO: Fix alumni_profiles relation\n        profile2Name: 'Unknown', // TODO: Fix alumni_profiles relation\n        winnerName: undefined, // TODO: Fix alumni_profiles relation\n        votedEqual: session.voted_equal,\n        eloChanges: {\n          profile1: session.elo_history?.[0]?.change_amount || 0,\n          profile2: session.elo_history?.[1]?.change_amount || 0\n        }\n      }))\n    } catch (error) {\n      console.error('Error getting vote analytics:', error)\n      throw error\n    }\n  }\n\n  static async uploadCSV(csvContent: string): Promise<{ success: boolean; message: string; profilesAdded: number }> {\n    try {\n      // Parse CSV\n      const alumniData = parseCSV(csvContent)\n      \n      console.log('CSV parsed successfully. Found', alumniData.length, 'profiles')\n      \n      if (alumniData.length === 0) {\n        return { success: false, message: 'No valid profiles found in CSV', profilesAdded: 0 }\n      }\n\n      let profilesAdded = 0\n\n      // Process each alumni profile\n      for (const alumni of alumniData) {\n        const parsedProfile = parseExperiencesAndEducation(alumni)\n\n        // Check if profile already exists by name (since LinkedIn URL might be empty)\n        const { data: existingProfile, error: checkError } = await supabase\n          .from('alumni_profiles')\n          .select('id')\n          .eq('name', parsedProfile.name)\n          .maybeSingle()\n\n        if (checkError) {\n          console.error('Error checking existing profile:', checkError)\n        }\n\n        if (existingProfile) {\n          console.log('Skipping existing profile:', parsedProfile.name)\n          continue // Skip existing profiles\n        }\n\n        // Insert new profile\n        const { data: newProfile, error: profileError } = await supabase\n          .from('alumni_profiles')\n          .insert({\n            name: parsedProfile.name,\n            location: parsedProfile.location,\n            profile_picture_url: parsedProfile.profile_picture_url,\n            high_school: parsedProfile.high_school,\n            dvhs_class_of: parsedProfile.dvhs_class_of,\n            college_1_name: parsedProfile.college_1_name,\n            college_1_degree: parsedProfile.college_1_degree,\n            college_1_logo: parsedProfile.college_1_logo,\n            college_2_name: parsedProfile.college_2_name,\n            college_2_degree: parsedProfile.college_2_degree,\n            college_2_logo: parsedProfile.college_2_logo,\n            college_3_name: parsedProfile.college_3_name,\n            college_3_degree: parsedProfile.college_3_degree,\n            college_3_logo: parsedProfile.college_3_logo,\n            experience_1_company: parsedProfile.experience_1_company,\n            experience_1_role: parsedProfile.experience_1_role,\n            experience_1_logo: parsedProfile.experience_1_logo,\n            experience_2_company: parsedProfile.experience_2_company,\n            experience_2_role: parsedProfile.experience_2_role,\n            experience_2_logo: parsedProfile.experience_2_logo,\n            experience_3_company: parsedProfile.experience_3_company,\n            experience_3_role: parsedProfile.experience_3_role,\n            experience_3_logo: parsedProfile.experience_3_logo,\n            experience_4_company: parsedProfile.experience_4_company,\n            experience_4_role: parsedProfile.experience_4_role,\n            experience_4_logo: parsedProfile.experience_4_logo,\n            linkedin_url: parsedProfile.linkedin_url,\n            elo: 2000 // Default ELO\n          })\n          .select()\n          .single()\n\n        if (profileError) {\n          console.error('Error inserting profile:', parsedProfile.name, profileError)\n          continue\n        }\n\n        console.log('Successfully inserted profile:', parsedProfile.name)\n\n        // Insert experiences\n        if (parsedProfile.experiences.length > 0) {\n          const experiences = parsedProfile.experiences.map((exp, index) => ({\n            alumni_id: newProfile.id,\n            role: exp.role,\n            company: exp.company,\n            order_index: index\n          }))\n\n          await supabase.from('experiences').insert(experiences)\n        }\n\n        // Insert education\n        if (parsedProfile.education.length > 0) {\n          const education = parsedProfile.education.map((edu, index) => ({\n            alumni_id: newProfile.id,\n            school: edu.school,\n            degree: edu.degree,\n            order_index: index\n          }))\n\n          await supabase.from('education').insert(education)\n        }\n\n        profilesAdded++\n      }\n\n      return { \n        success: true, \n        message: `Successfully added ${profilesAdded} new profiles`, \n        profilesAdded \n      }\n    } catch (error) {\n      console.error('Error uploading CSV:', error)\n      return { \n        success: false, \n        message: `Error processing CSV: ${error instanceof Error ? error.message : 'Unknown error'}`, \n        profilesAdded: 0 \n      }\n    }\n  }\n\n  static async getAllProfiles(limit: number = 100): Promise<AlumniProfile[]> {\n    try {\n      const { data, error } = await supabase\n        .from('alumni_profiles')\n        .select(`\n          *,\n          experiences (*),\n          education (*)\n        `)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n      if (error) {\n        console.error('Error getting all profiles:', error)\n        return []\n      }\n      return data || []\n    } catch (error) {\n      console.error('Error getting all profiles:', error)\n      return []\n    }\n  }\n\n  static async updateProfileElo(profileId: string, newElo: number): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('alumni_profiles')\n        .update({ elo: newElo })\n        .eq('id', profileId)\n\n      return !error\n    } catch (error) {\n      console.error('Error updating profile ELO:', error)\n      return false\n    }\n  }\n}\n","size_bytes":10672}},"version":2}